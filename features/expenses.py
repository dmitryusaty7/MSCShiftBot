"""–°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–†–∞—Å—Ö–æ–¥—ã —Å–º–µ–Ω—ã¬ª –ø–æ —à–∞–≥–∞–º."""

from __future__ import annotations

import asyncio
import re
from typing import TYPE_CHECKING

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from features.utils.messaging import safe_delete
from services.sheets import SheetsService

if TYPE_CHECKING:  # pragma: no cover
    from features.shift_menu import render_shift_menu as RenderShiftMenuFn

router = Router()
_service: SheetsService | None = None


def _get_service() -> SheetsService:
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π."""

    global _service
    if _service is None:
        _service = SheetsService()
    return _service


def _render_shift_menu(*args, **kwargs):
    """–õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç –º–µ–Ω—é —Å–º–µ–Ω—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""

    from features.shift_menu import render_shift_menu

    return render_shift_menu(*args, **kwargs)

BTN_BACK = "‚¨Ö –ù–∞–∑–∞–¥"
BTN_HOME = "üè† –í –º–µ–Ω—é"
BTN_SKIP = "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"

HOLDS_CHOICES = [str(i) for i in range(1, 8)]


def normalize_ship_name(value: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞ –∫ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–º—É –≤–∏–¥—É —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤–æ–π."""

    cleaned = re.sub(r"\s+", " ", value.strip())
    if not cleaned:
        return cleaned
    return cleaned[0].upper() + cleaned[1:].lower()


def numeric_or_zero(text: str) -> int | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ 0 –¥–ª—è ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª; –∏–Ω–∞—á–µ None."""

    candidate = text.strip()
    if candidate == BTN_SKIP:
        return 0
    if not re.fullmatch(r"\d+", candidate):
        return None
    return int(candidate)


class ExpenseFSM(StatesGroup):
    """–®–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤."""

    ship = State()
    holds = State()
    e = State()
    f = State()
    g = State()
    h = State()
    i = State()
    j = State()
    k = State()
    confirm = State()


def nav_kb(extra: list[str] | None = None) -> types.ReplyKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é."""

    keyboard = ReplyKeyboardBuilder()
    if extra:
        for value in extra:
            keyboard.button(text=value)
        keyboard.adjust(len(extra))
    keyboard.button(text=BTN_BACK)
    keyboard.button(text=BTN_HOME)
    keyboard.adjust(2)
    return keyboard.as_markup(resize_keyboard=True)


def holds_kb() -> types.ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞ —Ç—Ä—é–º–æ–≤."""

    keyboard = ReplyKeyboardBuilder()
    for number in HOLDS_CHOICES:
        keyboard.button(text=number)
    keyboard.adjust(7)
    keyboard.button(text=BTN_BACK)
    keyboard.button(text=BTN_HOME)
    keyboard.adjust(7, 2)
    return keyboard.as_markup(resize_keyboard=True)


def ship_choices_kb(ships: list[str]) -> types.ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ —Å—É–¥–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""

    keyboard = ReplyKeyboardBuilder()
    for name in ships:
        keyboard.button(text=name)
    keyboard.button(text=BTN_BACK)
    keyboard.button(text=BTN_HOME)
    row_sizes = [1] * len(ships)
    row_sizes.append(2)
    keyboard.adjust(*row_sizes)
    return keyboard.as_markup(resize_keyboard=True)


@router.message(Command("expenses"))
async def start_expenses(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤."""

    await safe_delete(message)
    user_id = message.from_user.id
    service = _get_service()
    row = await asyncio.to_thread(
        service.get_shift_row_index_for_user, user_id
    )
    if row is None:
        row = await asyncio.to_thread(service.open_shift_for_user, user_id)
    await state.update_data(row=row, user_id=user_id)
    await ask_ship(message, state)


async def ask_ship(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞."""

    service = _get_service()
    ships = await asyncio.to_thread(service.get_active_ships)
    await state.update_data(_ships=ships, _candidate=None)
    await state.set_state(ExpenseFSM.ship)
    suggestions = ships[:10]
    if suggestions:
        prompt = (
            "–≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–¥–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è.\n"
            "–µ—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ —Å—É–¥–Ω–∞ –Ω–µ—Ç, –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü—É."
        )
        markup = ship_choices_kb(suggestions)
    else:
        prompt = (
            "–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞. –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ,"
            " –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ."
        )
        markup = nav_kb()
    await message.answer(prompt, reply_markup=markup)


@router.message(ExpenseFSM.ship)
async def ship_input(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—É–¥–Ω–∞ –∏ –≤—ã–±–æ—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."""

    text = message.text.strip()
    if text.startswith("–î–æ–±–∞–≤–∏—Ç—å: "):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å: ‚Ä¶¬ª –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –ø—Ä–∏
        # –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ –±–∞–∑–æ–≤–æ–≥–æ —Ö—ç–Ω–¥–ª–µ—Ä–∞ –∏–∑-–∑–∞ –ø–æ—Ä—è–¥–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        return await add_ship(message, state)
    if text in (BTN_BACK, BTN_HOME):
        await safe_delete(message)
        return await exit_by_nav(message, state, text)

    data = await state.get_data()
    ships: list[str] = data.get("_ships", [])
    query = text.lower()
    matches = [name for name in ships if query in name.lower()]

    if len(matches) == 1:
        await state.update_data(ship=matches[0])
        await safe_delete(message)
        return await ask_holds(message, state)

    if len(matches) > 1:
        keyboard = ship_choices_kb(matches[:10])
        await message.answer(
            "–Ω–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ:",
            reply_markup=keyboard,
        )
        return

    candidate = normalize_ship_name(text)
    if not re.fullmatch(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë0-9\- ]{2,}", candidate):
        await message.answer(
            "–Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/–¥–µ—Ñ–∏—Å/–ø—Ä–æ–±–µ–ª."
        )
        return

    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text=f"–î–æ–±–∞–≤–∏—Ç—å: {candidate}")
    keyboard.adjust(1)
    keyboard.button(text=BTN_BACK)
    keyboard.button(text=BTN_HOME)
    keyboard.adjust(1, 2)
    await state.update_data(_candidate=candidate)
    await message.answer(
        f"—Å—É–¥–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –¥–æ–±–∞–≤–∏—Ç—å ¬´{candidate}¬ª –∫–∞–∫ –Ω–æ–≤–æ–µ?",
        reply_markup=keyboard.as_markup(resize_keyboard=True),
    )


@router.message(ExpenseFSM.ship, F.text.startswith("–î–æ–±–∞–≤–∏—Ç—å: "))
async def add_ship(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å—É–¥–Ω–æ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É."""

    data = await state.get_data()
    candidate = data.get("_candidate")
    if not candidate:
        await message.answer("–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—É–¥–Ω–∞.")
        return
    service = _get_service()
    await asyncio.to_thread(service.add_ship, candidate)
    await state.update_data(ship=candidate)
    await safe_delete(message)
    await ask_holds(message, state)


async def ask_holds(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä—é–º–æ–≤."""

    await state.set_state(ExpenseFSM.holds)
    await message.answer(
        "—Å–∫–æ–ª—å–∫–æ —Ç—Ä—é–º–æ–≤ –Ω–∞ —Å—É–¥–Ω–µ?",
        reply_markup=holds_kb(),
    )


@router.message(ExpenseFSM.holds)
async def holds_input(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä—é–º–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –¥–µ–Ω–µ–∂–Ω—ã–º –ø–æ–ª—è–º."""

    text = message.text.strip()
    if text in (BTN_BACK, BTN_HOME):
        await safe_delete(message)
        return await exit_by_nav(message, state, text)
    if text not in HOLDS_CHOICES:
        await message.answer("–≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7 –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.")
        return
    await state.update_data(holds=int(text))
    await safe_delete(message)
    await ask_amount(
        message,
        state,
        ExpenseFSM.e,
        "—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è.",
        allow_skip=True,
    )


async def ask_amount(
    message: types.Message,
    state: FSMContext,
    next_state: State,
    prompt: str,
    *,
    allow_skip: bool,
) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å—É–º–º—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª–µ–π —Ä–∞—Å—Ö–æ–¥–æ–≤."""

    await state.set_state(next_state)
    extras = [BTN_SKIP] if allow_skip else []
    await message.answer(prompt, reply_markup=nav_kb(extras))


@router.message(ExpenseFSM.e)
async def e_input(message: types.Message, state: FSMContext) -> None:
    await handle_amount_input(
        message,
        state,
        field_key="e",
        next_state=ExpenseFSM.f,
        next_prompt="—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è (–±—Ä–∏–≥–∞–¥–∏—Ä).",
        allow_skip=True,
    )


@router.message(ExpenseFSM.f)
async def f_input(message: types.Message, state: FSMContext) -> None:
    await handle_amount_input(
        message,
        state,
        field_key="f",
        next_state=ExpenseFSM.g,
        next_prompt="—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã —Ä–∞–±–æ—á–∏—Ö.",
        allow_skip=True,
    )


@router.message(ExpenseFSM.g)
async def g_input(message: types.Message, state: FSMContext) -> None:
    await handle_amount_input(
        message,
        state,
        field_key="g",
        next_state=ExpenseFSM.h,
        next_prompt="—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.",
        allow_skip=True,
    )


@router.message(ExpenseFSM.h)
async def h_input(message: types.Message, state: FSMContext) -> None:
    await handle_amount_input(
        message,
        state,
        field_key="h",
        next_state=ExpenseFSM.i,
        next_prompt="—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ.",
        allow_skip=True,
    )


@router.message(ExpenseFSM.i)
async def i_input(message: types.Message, state: FSMContext) -> None:
    await handle_amount_input(
        message,
        state,
        field_key="i",
        next_state=ExpenseFSM.j,
        next_prompt="—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Ç–∞–∫—Å–∏.",
        allow_skip=True,
    )


@router.message(ExpenseFSM.j)
async def j_input(message: types.Message, state: FSMContext) -> None:
    await handle_amount_input(
        message,
        state,
        field_key="j",
        next_state=ExpenseFSM.k,
        next_prompt="—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ—á–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.",
        allow_skip=True,
    )


@router.message(ExpenseFSM.k)
async def k_input(message: types.Message, state: FSMContext) -> None:
    value = numeric_or_zero(message.text)
    if value is None:
        if message.text in (BTN_BACK, BTN_HOME):
            await safe_delete(message)
            return await exit_by_nav(message, state, message.text)
        await message.answer("—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (—Ä—É–±–ª–∏) –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
        return
    await state.update_data(k=value)
    await safe_delete(message)
    await show_confirm(message, state)


async def handle_amount_input(
    message: types.Message,
    state: FSMContext,
    *,
    field_key: str,
    next_state: State,
    next_prompt: str,
    allow_skip: bool,
) -> None:
    """–û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π —Ä–∞—Å—Ö–æ–¥–æ–≤."""

    value = numeric_or_zero(message.text)
    if value is None:
        if message.text in (BTN_BACK, BTN_HOME):
            await safe_delete(message)
            return await exit_by_nav(message, state, message.text)
        await message.answer("—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (—Ä—É–±–ª–∏) –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
        return

    await state.update_data(**{field_key: value})
    await safe_delete(message)
    await ask_amount(
        message,
        state,
        next_state,
        next_prompt,
        allow_skip=allow_skip,
    )


async def show_confirm(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""

    await state.set_state(ExpenseFSM.confirm)
    data = await state.get_data()
    e = data.get("e", 0)
    f = data.get("f", 0)
    g = data.get("g", 0)
    h_val = data.get("h", 0)
    i_val = data.get("i", 0)
    j_val = data.get("j", 0)
    k_val = data.get("k", 0)
    total = sum([e, f, g, h_val, i_val, j_val, k_val])
    await state.update_data(total=total)

    ship = data.get("ship")
    holds = data.get("holds")
    text = (
        "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"‚Ä¢ —Å—É–¥–Ω–æ: {ship}\n"
        f"‚Ä¢ —Ç—Ä—é–º–æ–≤: {holds}\n"
        f"‚Ä¢ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {e}\n"
        f"‚Ä¢ –±—Ä–∏–≥–∞–¥–∏—Ä: {f}\n"
        f"‚Ä¢ —Ä–∞–±–æ—á–∏–µ: {g}\n"
        f"‚Ä¢ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ: {h_val}\n"
        f"‚Ä¢ –ø–∏—Ç–∞–Ω–∏–µ: {i_val}\n"
        f"‚Ä¢ —Ç–∞–∫—Å–∏: {j_val}\n"
        f"‚Ä¢ –ø—Ä–æ—á–∏–µ: {k_val}\n"
        f"‚Äî –≤—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total}"
    )
    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
    keyboard.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
    keyboard.adjust(2)
    keyboard.button(text=BTN_BACK)
    keyboard.button(text=BTN_HOME)
    keyboard.adjust(2, 2)
    await message.answer(
        text,
        reply_markup=keyboard.as_markup(resize_keyboard=True),
    )


@router.message(ExpenseFSM.confirm, F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
async def edit_again(message: types.Message, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∞—á–∞–ª—É —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π."""

    await safe_delete(message)
    await ask_ship(message, state)


@router.message(ExpenseFSM.confirm, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirm_save(message: types.Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Å–º–µ–Ω—ã."""

    await safe_delete(message)
    data = await state.get_data()
    row = data["row"]
    user_id = data["user_id"]
    service = _get_service()
    await asyncio.to_thread(
        service.save_expenses_block,
        user_id,
        row,
        ship=data.get("ship"),
        holds=data.get("holds"),
        e=data.get("e", 0),
        f=data.get("f", 0),
        g=data.get("g", 0),
        h=data.get("h", 0),
        i=data.get("i", 0),
        j=data.get("j", 0),
        k=data.get("k", 0),
        total=data.get("total", 0),
    )
    await state.clear()
    await message.answer("—Ä–∞–∑–¥–µ–ª ¬´—Ä–∞—Å—Ö–æ–¥—ã —Å–º–µ–Ω—ã¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
    await _render_shift_menu(message, user_id, row)


async def exit_by_nav(message: types.Message, state: FSMContext, key: str) -> None:
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è."""

    data = await state.get_data()
    await state.clear()
    if key == BTN_HOME:
        from features.main_menu import show_menu

        await show_menu(message)
        return
    await _render_shift_menu(message, data.get("user_id"), data.get("row"))
