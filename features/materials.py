"""–°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–ú–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª —Å–æ —Å–±–æ—Ä–æ–º —Ñ–æ—Ç–æ."""

from __future__ import annotations

import asyncio
import datetime as dt
import logging
import re
from typing import TYPE_CHECKING

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from features.utils.messaging import safe_delete
from services.drive import DriveService
from services.sheets import SheetsService

if TYPE_CHECKING:  # pragma: no cover
    from features.shift_menu import render_shift_menu as RenderShiftMenuFn

router = Router()
logger = logging.getLogger(__name__)
_sheets_service: SheetsService | None = None
_drive_service: DriveService | None = None


def _get_sheets_service() -> SheetsService:
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Google Sheets."""

    global _sheets_service
    if _sheets_service is None:
        _sheets_service = SheetsService()
    return _sheets_service


def _get_drive_service() -> DriveService:
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Google Drive."""

    global _drive_service
    if _drive_service is None:
        _drive_service = DriveService()
    return _drive_service


def _render_shift_menu(*args, **kwargs):
    """–õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç –º–µ–Ω—é —Å–º–µ–Ω—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""

    from features.shift_menu import render_shift_menu

    return render_shift_menu(*args, **kwargs)


BTN_BACK = "‚¨Ö –ù–∞–∑–∞–¥"
BTN_HOME = "üè† –í –º–µ–Ω—é"
BTN_SKIP = "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
BTN_CONFIRM = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
BTN_DEL_LAST = "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ"


def nav_kb(extra: list[str] | None = None) -> types.ReplyKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±–∞–∑–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π."""

    keyboard = ReplyKeyboardBuilder()
    if extra:
        for item in extra:
            keyboard.button(text=item)
        keyboard.adjust(len(extra))
    keyboard.button(text=BTN_BACK)
    keyboard.button(text=BTN_HOME)
    keyboard.adjust(2)
    return keyboard.as_markup(resize_keyboard=True)


def only_digits(text: str) -> int | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π."""

    stripped = (text or "").strip()
    if stripped == BTN_SKIP:
        return 0
    return int(stripped) if re.fullmatch(r"\d+", stripped) else None


class MaterialsFSM(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""

    pvd = State()
    pvc = State()
    tape = State()
    photos = State()
    confirm = State()


@router.message(Command("materials"))
async def start_materials(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""

    await safe_delete(message)
    user_id = message.from_user.id
    sheets = _get_sheets_service()
    row = await asyncio.to_thread(sheets.get_shift_row_index_for_user, user_id)
    if row is None:
        row = await asyncio.to_thread(sheets.open_shift_for_user, user_id)
    await state.update_data(user_id=user_id, row=row, photo_ids=[])
    await ask_pvd(message, state)


async def ask_pvd(message: types.Message, state: FSMContext) -> None:
    await state.set_state(MaterialsFSM.pvd)
    await message.answer(
        "—É–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ä—É–ª–æ–Ω–æ–≤ –ü–í–î (–≤ –º–µ—Ç—Ä–∞—Ö).",
        reply_markup=nav_kb([BTN_SKIP]),
    )


@router.message(MaterialsFSM.pvd)
async def input_pvd(message: types.Message, state: FSMContext) -> None:
    if message.text in (BTN_BACK, BTN_HOME):
        return await exit_nav(message, state, message.text)
    value = only_digits(message.text or "")
    if value is None:
        return await message.answer("—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
    await state.update_data(pvd=value)
    await ask_pvc(message, state)


async def ask_pvc(message: types.Message, state: FSMContext) -> None:
    await state.set_state(MaterialsFSM.pvc)
    await message.answer(
        "—É–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ç—Ä—É–±–æ–∫ –ü–í–• (–≤ —à—Ç—É–∫–∞—Ö).",
        reply_markup=nav_kb([BTN_SKIP]),
    )


@router.message(MaterialsFSM.pvc)
async def input_pvc(message: types.Message, state: FSMContext) -> None:
    if message.text in (BTN_BACK, BTN_HOME):
        return await exit_nav(message, state, message.text)
    value = only_digits(message.text or "")
    if value is None:
        return await message.answer("—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
    await state.update_data(pvc=value)
    await ask_tape(message, state)


async def ask_tape(message: types.Message, state: FSMContext) -> None:
    await state.set_state(MaterialsFSM.tape)
    await message.answer(
        "—É–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –∫–ª–µ–π–∫–æ–π –ª–µ–Ω—Ç—ã (–≤ —à—Ç—É–∫–∞—Ö).",
        reply_markup=nav_kb([BTN_SKIP]),
    )


@router.message(MaterialsFSM.tape)
async def input_tape(message: types.Message, state: FSMContext) -> None:
    if message.text in (BTN_BACK, BTN_HOME):
        return await exit_nav(message, state, message.text)
    value = only_digits(message.text or "")
    if value is None:
        return await message.answer("—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
    await state.update_data(tape=value)
    await ask_photos_intro(message, state)


async def ask_photos_intro(message: types.Message, state: FSMContext) -> None:
    await state.set_state(MaterialsFSM.photos)
    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text=BTN_CONFIRM)
    keyboard.button(text=BTN_DEL_LAST)
    keyboard.adjust(2)
    keyboard.button(text=BTN_BACK)
    keyboard.button(text=BTN_HOME)
    keyboard.adjust(2, 2)
    await message.answer(
        "üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫—Ä–µ–ø–ª–µ–Ω–∏—è. –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –ø–æ–¥—Ä—è–¥.\n"
        f"–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ¬´{BTN_CONFIRM}¬ª.",
        reply_markup=keyboard.as_markup(resize_keyboard=True),
    )


@router.message(MaterialsFSM.photos, F.photo)
async def on_photo(message: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    photo_ids: list[str] = data.get("photo_ids", [])
    file_id = message.photo[-1].file_id
    photo_ids.append(file_id)
    await state.update_data(photo_ids=photo_ids)
    await message.answer(
        f"—Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(photo_ids)} —à—Ç). –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë –∏–ª–∏ ¬´{BTN_CONFIRM}¬ª."
    )


@router.message(MaterialsFSM.photos, F.text == BTN_DEL_LAST)
async def del_last_photo(message: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    photo_ids: list[str] = data.get("photo_ids", [])
    if photo_ids:
        photo_ids.pop()
        await state.update_data(photo_ids=photo_ids)
        await message.answer(f"–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ. –æ—Å—Ç–∞–ª–æ—Å—å: {len(photo_ids)}.")
    else:
        await message.answer("—Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –ø—É—Å—Ç.")


@router.message(MaterialsFSM.photos, F.text == BTN_CONFIRM)
async def confirm_upload(message: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    user_id = data["user_id"]
    row = data["row"]
    photo_ids: list[str] = data.get("photo_ids", [])
    if not photo_ids:
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.")
        return

    try:
        drive = _get_drive_service()
    except Exception as exc:  # pragma: no cover - –æ—à–∏–±–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DriveService: %s", exc)
        await message.answer(
            "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Drive. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )
        return

    sheets = _get_sheets_service()

    try:
        folder_id = await asyncio.to_thread(drive.create_daily_folder)
        links: list[str] = []

        for index, file_id in enumerate(photo_ids, start=1):
            telegram_file = await message.bot.get_file(file_id)
            downloaded = await message.bot.download_file(telegram_file.file_path)
            payload = downloaded.read() if hasattr(downloaded, "read") else downloaded
            timestamp = dt.datetime.now().strftime("%H%M%S_%f")
            filename = f"photo_{timestamp}_{index}.jpg"
            link = await asyncio.to_thread(
                drive.upload_photo,
                folder_id,
                payload,
                filename,
            )
            if link:
                links.append(link)

        if not links:
            raise RuntimeError("Google Drive –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ")

        links_text = "\n".join(links)

        await asyncio.to_thread(
            sheets.save_materials_block,
            row,
            pvd_m=data.get("pvd", 0),
            pvc_pcs=data.get("pvc", 0),
            tape_pcs=data.get("tape", 0),
            folder_link=links_text,
        )
        logger.info(
            "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: user_id=%s, row=%s, —Ñ–æ—Ç–æ=%s", user_id, row, len(photo_ids)
        )
    except Exception as exc:  # pragma: no cover - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: %s", exc)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ Google Drive. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ "
            "–∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return

    await message.answer("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –æ—Ç—á—ë—Ç–µ.")
    await state.clear()
    await _render_shift_menu(message, user_id, row)


@router.message(MaterialsFSM.photos)
async def photos_fallback(message: types.Message, state: FSMContext) -> None:
    if message.text in (BTN_BACK, BTN_HOME):
        return await exit_nav(message, state, message.text)
    await message.answer("–ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")


async def exit_nav(message: types.Message, state: FSMContext, key: str) -> None:
    data = await state.get_data()
    await state.clear()
    if key == BTN_HOME:
        from features.main_menu import show_menu

        return await show_menu(message)
    await _render_shift_menu(message, data.get("user_id"), data.get("row"))
