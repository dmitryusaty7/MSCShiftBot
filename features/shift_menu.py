"""–ú–µ–Ω—é –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã –∏ —Å—Ç–∞—Ç—É—Å—ã —Ä–∞–∑–¥–µ–ª–æ–≤."""

from __future__ import annotations

import asyncio
import json
import logging
from dataclasses import dataclass
from datetime import date, datetime
from typing import Any

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from features.utils.locks import acquire_user_lock, release_user_lock
from features.utils.messaging import safe_delete, send_progress
from services.sheets import SheetsService
from services.env import group_notifications_enabled

router = Router()
_service: SheetsService | None = None
logger = logging.getLogger(__name__)

GROUP_CHAT_ID = -1003298300145


class ShiftState(StatesGroup):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã."""

    IDLE = State()
    ACTIVE = State()


class Mode(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø–æ–¥—Ä–µ–∂–∏–º—ã."""

    EXPENSES = State()
    MATERIALS = State()
    CREW = State()


@dataclass
class ShiftSession:
    """–û—Ç—Ä–∞–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–º–µ–Ω—ã."""

    date: str
    row: int
    modes: dict[str, bool]
    closed: bool = False


_sessions: dict[int, ShiftSession] = {}


MODE_KEYS = {
    "expenses": "expenses",
    "materials": "materials",
    "crew": "crew",
}


def _get_service() -> SheetsService:
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç–∞–±–ª–∏—Ü."""

    global _service
    if _service is None:
        _service = SheetsService()
    return _service


def _resolve_service(service: SheetsService | None) -> SheetsService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä."""

    global _service
    if service is not None:
        _service = service
        return service
    return _get_service()


# ---- —Ä–∞–∑–¥–µ–ª—ã / –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã ----
BTN_EXPENSES_LABEL = "üßæ –†–∞—Å—Ö–æ–¥—ã"
BTN_MATERIALS_LABEL = "üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
BTN_CREW_LABEL = "üë• –ë—Ä–∏–≥–∞–¥–∞"
BTN_FINISH_SHIFT = "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É"

# ---- —Å—Ç–∏–ª—å —Å—Ç–∞—Ç—É—Å–æ–≤: 'emoji' | 'traffic' | 'text'
STATUS_STYLE = "emoji"

STATUS_SETS = {
    "emoji": {"done": "‚úÖ –≥–æ—Ç–æ–≤–æ", "todo": "‚úçÔ∏è –∑–∞–ø–æ–ª–Ω–∏—Ç—å"},
    "traffic": {"done": "üü¢ –≥–æ—Ç–æ–≤–æ", "todo": "üü† –∑–∞–ø–æ–ª–Ω–∏—Ç—å"},
    "text": {"done": "[–≥–æ—Ç–æ–≤–æ]", "todo": "[–∑–∞–ø–æ–ª–Ω–∏—Ç—å]"},
}


def status_badge(done: bool) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å —Å—Ç–∞—Ç—É—Å–∞ —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è."""

    style = STATUS_SETS.get(STATUS_STYLE, STATUS_SETS["emoji"])
    return style["done"] if done else style["todo"]


def _line(label: str, done: bool) -> str:
    """–°—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–∞ –∏ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è."""

    return f"{label} ‚Äî {status_badge(done)}"


def reset_shift_session(user_id: int) -> None:
    """–û—á–∏—â–∞–µ—Ç –∫–µ—à —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    _sessions.pop(user_id, None)


def _sync_session(
    user_id: int,
    *,
    row: int,
    progress: dict[str, bool],
    shift_date: str,
    closed: bool,
) -> ShiftSession:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ."""

    session = _sessions.get(user_id)
    if session is None or session.date != shift_date:
        session = ShiftSession(
            date=shift_date,
            row=row,
            modes={key: bool(progress.get(key, False)) for key in MODE_KEYS.values()},
            closed=closed,
        )
        _sessions[user_id] = session
    else:
        session.row = row
        session.closed = closed
        for key in MODE_KEYS.values():
            if key in progress:
                session.modes[key] = bool(progress[key])
    return session


def mark_mode_done(user_id: int, mode: str) -> None:
    """–ü–æ–º–µ—á–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏."""

    session = _sessions.get(user_id)
    key = MODE_KEYS.get(mode)
    if session and key:
        session.modes[key] = True


def mark_shift_closed(user_id: int) -> None:
    """–ü–æ–º–µ—á–∞–µ—Ç —Å–º–µ–Ω—É –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—É—é –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏."""

    session = _sessions.get(user_id)
    if session:
        session.closed = True


def _payload(action: str, **extra: Any) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç JSON-–ø–µ–π–ª–æ–∞–¥ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫."""

    data = {"a": action}
    data.update(extra)
    return json.dumps(data, ensure_ascii=False, separators=(",", ":"))


def _keyboard(session: ShiftSession) -> types.InlineKeyboardMarkup:
    """–°–æ–±–∏—Ä–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é —Å–º–µ–Ω—ã."""

    builder = InlineKeyboardBuilder()
    builder.button(
        text=BTN_EXPENSES_LABEL,
        callback_data=_payload("open_mode", m="expenses"),
    )
    builder.button(
        text=BTN_MATERIALS_LABEL,
        callback_data=_payload("open_mode", m="materials"),
    )
    builder.button(
        text=BTN_CREW_LABEL,
        callback_data=_payload("open_mode", m="crew"),
    )
    if all(session.modes.values()) and not session.closed:
        builder.button(
            text=BTN_FINISH_SHIFT,
            callback_data=_payload("finish_shift"),
        )
    builder.button(
        text="‚¨Ö –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data=_payload("shift_menu", m="home"),
    )
    builder.adjust(1)
    return builder.as_markup()


async def render_shift_menu(
    message: types.Message,
    user_id: int,
    row: int | None,
    service: SheetsService | None = None,
    *,
    state: FSMContext | None = None,
    delete_trigger_message: bool = True,
    show_progress: bool = True,
) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å–º–µ–Ω—ã, —Å–æ–∑–¥–∞–≤–∞—è —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""

    sheets = _resolve_service(service)

    if delete_trigger_message:
        await safe_delete(message)

    progress_message = (
        await send_progress(message, "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")
        if show_progress
        else None
    )

    row_index = row
    progress: dict[str, bool] | None = None
    lock = None
    try:
        if row_index is None:
            lock = await acquire_user_lock(user_id)
            if lock is None:
                await message.answer(
                    "–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
                )
                return

            try:
                row_index = await asyncio.to_thread(
                    sheets.open_shift_for_user, user_id
                )
            except Exception:  # noqa: BLE001
                logger.exception(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–æ–∫—É —Å–º–µ–Ω—ã (user_id=%s)", user_id
                )
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–º–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
                )
                return

        progress = await asyncio.to_thread(
            sheets.get_shift_progress, user_id, row_index
        )
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–º–µ–Ω—ã (user_id=%s)", user_id)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return
    finally:
        if lock is not None:
            release_user_lock(lock)
        await safe_delete(progress_message)

    if progress is None or row_index is None:
        return

    try:
        shift_closed = await asyncio.to_thread(
            sheets.is_shift_closed, row_index
        )
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–∫—Ä—ã—Ç–∞ –ª–∏ —Å–º–µ–Ω–∞ (user_id=%s, row=%s)",
            user_id,
            row_index,
        )
        shift_closed = False

    try:
        shift_date_raw = await asyncio.to_thread(
            sheets.get_shift_date, row_index
        )
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Å–º–µ–Ω—ã (user_id=%s, row=%s)", user_id, row_index
        )
        shift_date_raw = ""

    shift_date = (shift_date_raw or date.today().isoformat()).strip()
    session = _sync_session(
        user_id,
        row=row_index,
        progress=progress,
        shift_date=shift_date,
        closed=shift_closed,
    )

    if state is not None:
        await state.set_state(ShiftState.ACTIVE)

    lines = [
        "üóÇ –ú–µ–Ω—é –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã",
        f"–î–∞—Ç–∞: {_format_date_for_summary(session.date)}",
        "",
        _line(BTN_EXPENSES_LABEL, session.modes["expenses"]),
        _line(BTN_MATERIALS_LABEL, session.modes["materials"]),
        _line(BTN_CREW_LABEL, session.modes["crew"]),
    ]

    if session.closed:
        lines.extend(
            [
                "",
                "–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É –∑–∞–≤—Ç—Ä–∞.",
            ]
        )
    else:
        lines.extend(
            [
                "",
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –ö–Ω–æ–ø–∫–∞ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É¬ª –ø–æ—è–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –±—É–¥—É—Ç –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–µ.",
            ]
        )

    await message.answer("\n".join(lines), reply_markup=_keyboard(session))


def _parse_payload(raw: str | None) -> dict[str, Any] | None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç JSON-–ø–µ–π–ª–æ–∞–¥ –∏–∑ callback_data."""

    if not raw:
        return None
    try:
        data = json.loads(raw)
    except json.JSONDecodeError:
        logger.debug("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload –≤ callback: %s", raw)
        return None
    if not isinstance(data, dict):
        return None
    return data


async def _open_mode(callback: types.CallbackQuery, state: FSMContext, mode: str) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥—Ä–µ–∂–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã."""

    handlers = {
        "expenses": (
            Mode.EXPENSES,
            "start_expenses",
            "features.expenses",
        ),
        "materials": (
            Mode.MATERIALS,
            "start_materials",
            "features.materials",
        ),
        "crew": (
            Mode.CREW,
            "start_crew",
            "features.crew",
        ),
    }

    target = handlers.get(mode)
    if not target:
        await callback.answer("–†–∞–∑–¥–µ–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    await state.update_data(_shift_user_id=callback.from_user.id)
    await state.set_state(target[0])
    module_name = target[2]
    function_name = target[1]
    module = __import__(module_name, fromlist=[function_name])
    handler = getattr(module, function_name)
    await callback.answer()
    await handler(callback.message, state, user_id=callback.from_user.id)


async def _refresh_menu(
    callback: types.CallbackQuery,
    state: FSMContext,
    payload: dict[str, Any],
) -> None:
    """–ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""

    destination = payload.get("m")
    if destination == "home":
        from features.main_menu import show_menu

        await callback.answer()
        await safe_delete(callback.message)
        await show_menu(callback.message, state=state)
        return

    session = _sessions.get(callback.from_user.id)
    row = session.row if session else None
    await callback.answer()
    await render_shift_menu(
        callback.message,
        callback.from_user.id,
        row,
        state=state,
        delete_trigger_message=True,
        show_progress=False,
    )


async def _mark_mode_done_from_callback(
    callback: types.CallbackQuery, mode: str, state: FSMContext
) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é."""

    mark_mode_done(callback.from_user.id, mode)
    session = _sessions.get(callback.from_user.id)
    row = session.row if session else None
    await callback.answer("–†–∞–∑–¥–µ–ª –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
    await render_shift_menu(
        callback.message,
        callback.from_user.id,
        row,
        state=state,
        delete_trigger_message=True,
        show_progress=False,
    )


@router.callback_query()
async def handle_shift_callback(
    callback: types.CallbackQuery, state: FSMContext
) -> None:
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é —Å–º–µ–Ω—ã."""

    payload = _parse_payload(callback.data)
    if not payload:
        return

    action = payload.get("a")

    if not action:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
        return

    if action == "shift_menu":
        await _refresh_menu(callback, state, payload)
        return

    if action == "open_mode":
        await _open_mode(callback, state, str(payload.get("m")))
        return

    if action == "finish_shift":
        await close_shift(callback, state)
        return

    if action in {"expenses_done", "materials_done", "crew_done"}:
        mode = action.split("_")[0]
        await _mark_mode_done_from_callback(callback, mode, state)
        return

    await callback.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", show_alert=True)


def _format_number(value: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π —Ç—ã—Å—è—á."""

    return f"{value:,}".replace(",", " ")


def _format_date_for_summary(date_value: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì, –µ—Å–ª–∏ —É–¥–∞—ë—Ç—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å ISO-—Å—Ç—Ä–æ–∫—É."""

    text = (date_value or "").strip()
    if not text:
        return "‚Äî"
    for pattern in ("%Y-%m-%d", "%Y-%m-%dT%H:%M:%S", "%d.%m.%Y"):
        try:
            parsed = datetime.strptime(text, pattern)
            return parsed.strftime("%d.%m.%Y")
        except ValueError:
            continue
    return text


def build_group_report(brigadier: str, summary: dict[str, object]) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞."""

    expenses = summary.get("expenses", {}) if isinstance(summary, dict) else {}
    materials = summary.get("materials", {}) if isinstance(summary, dict) else {}

    date_text = _format_date_for_summary(str(summary.get("date", "")))
    ship = str(summary.get("ship", "")).strip() or "‚Äî"

    total_amount = 0
    if isinstance(expenses, dict):
        for key in ("driver", "brigadier", "workers", "aux", "food", "taxi", "other"):
            try:
                total_amount += int(expenses.get(key, 0) or 0)
            except (TypeError, ValueError):
                continue
    total_text = _format_number(total_amount)

    photos_link = "‚Äî"
    if isinstance(materials, dict):
        link_candidate = materials.get("photos_link")
        if isinstance(link_candidate, str) and link_candidate.strip():
            photos_link = link_candidate.strip()

    brigadier_line = brigadier.strip() if brigadier and brigadier.strip() else "‚Äî"

    lines = [
        "‚úÖ –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞",
        "",
        f"üë∑‚Äç‚ôÇÔ∏è –ë—Ä–∏–≥–∞–¥–∏—Ä: {brigadier_line}",
        f"üìÖ –î–∞—Ç–∞: {date_text}",
        f"üõ≥ –°—É–¥–Ω–æ: {ship}",
        f"üí∞ –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_text} ‚ÇΩ",
        f"üì∑ –§–æ—Ç–æ: {photos_link}",
        "",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!",
    ]
    return "\n".join(lines)


async def close_shift(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–¥–∫–∏."""

    await callback.answer()

    user_id = callback.from_user.id
    message = callback.message
    sheets = _resolve_service(None)

    await safe_delete(message)

    try:
        row = await asyncio.to_thread(
            sheets.get_shift_row_index_for_user, user_id
        )
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å–º–µ–Ω—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (user_id=%s)",
            user_id,
        )
        await message.answer(
            "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–±–æ—á—É—é —Å—Ç—Ä–æ–∫—É. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return

    if not row:
        await message.answer(
            "—Ä–∞–±–æ—á–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –Ω–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        return

    try:
        already_closed = await asyncio.to_thread(sheets.is_shift_closed, row)
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã (user_id=%s, row=%s)",
            user_id,
            row,
        )
        await message.answer(
            "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–º–µ–Ω—ã. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    if already_closed:
        await message.answer("—Å–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
        return

    try:
        progress = await asyncio.to_thread(
            sheets.get_shift_progress, user_id, row
        )
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–º–µ–Ω—ã –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º (user_id=%s, row=%s)",
            user_id,
            row,
        )
        await message.answer(
            "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–æ–≤. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    if not all(progress.values()):
        await message.answer(
            "–Ω–µ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞–∑–¥–µ–ª—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    profile = None
    try:
        profile = await asyncio.to_thread(sheets.get_user_profile, user_id)
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º (user_id=%s)",
            user_id,
        )

    try:
        summary = await asyncio.to_thread(sheets.get_shift_summary, row)
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ–¥–∫—É —Å–º–µ–Ω—ã (user_id=%s, row=%s)",
            user_id,
            row,
        )
        await message.answer(
            "–Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    try:
        closed_now = await asyncio.to_thread(
            sheets.finalize_shift, user_id, row
        )
    except Exception:  # noqa: BLE001
        logger.exception(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã (user_id=%s, row=%s)", user_id, row
        )
        await message.answer(
            "–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return

    if not closed_now:
        await message.answer("—Å–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
        return

    notifications_enabled = group_notifications_enabled()
    group_sent = False
    if notifications_enabled:
        crew_info = summary.get("crew") if isinstance(summary, dict) else None
        brigadier_name = ""
        if isinstance(crew_info, dict):
            name_candidate = crew_info.get("brigadier")
            if isinstance(name_candidate, str) and name_candidate.strip():
                brigadier_name = name_candidate.strip()
        if not brigadier_name and profile is not None:
            brigadier_name = profile.fio or profile.fio_compact
        if not brigadier_name:
            brigadier_name = (
                message.from_user.full_name
                or message.from_user.username
                or str(user_id)
            )
        report_text = build_group_report(brigadier_name, summary)
        try:
            await message.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=report_text,
                disable_web_page_preview=True,
            )
            group_sent = True
        except Exception:  # noqa: BLE001
            logger.exception(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç %s", GROUP_CHAT_ID
            )

    confirmation = (
        "—Å–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞. –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç."
        if group_sent
        else "—Å–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞."
    )
    await message.answer(confirmation + "\n–≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ä¶")

    mark_shift_closed(user_id)
    await state.set_state(ShiftState.IDLE)

    from features.main_menu import show_menu

    await show_menu(message, service=sheets, state=state)
