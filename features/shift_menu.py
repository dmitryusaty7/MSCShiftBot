"""–ú–µ–Ω—é –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã –∏ —Å—Ç–∞—Ç—É—Å—ã —Ä–∞–∑–¥–µ–ª–æ–≤."""

from __future__ import annotations

import asyncio
import logging
from datetime import datetime

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from features.utils.locks import acquire_user_lock, release_user_lock
from features.utils.messaging import safe_delete, send_progress
from services.sheets import SheetsService
from services.env import group_notifications_enabled

router = Router()
_service: SheetsService | None = None
logger = logging.getLogger(__name__)

GROUP_CHAT_ID = -1003298300145


def _get_service() -> SheetsService:
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç–∞–±–ª–∏—Ü."""

    global _service
    if _service is None:
        _service = SheetsService()
    return _service


def _resolve_service(service: SheetsService | None) -> SheetsService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä."""

    global _service
    if service is not None:
        _service = service
        return service
    return _get_service()


# ---- —Ä–∞–∑–¥–µ–ª—ã / –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã ----
BTN_EXPENSES_LABEL = "üßæ –†–∞—Å—Ö–æ–¥—ã"
BTN_MATERIALS_LABEL = "üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
BTN_CREW_LABEL = "üë• –ë—Ä–∏–≥–∞–¥–∞"
BTN_BACK = "‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
BTN_CLOSE_SHIFT = "üîí –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"

# ---- —Å—Ç–∏–ª—å —Å—Ç–∞—Ç—É—Å–æ–≤: 'emoji' | 'traffic' | 'text'
STATUS_STYLE = "emoji"

STATUS_SETS = {
    "emoji": {"done": "‚úÖ –≥–æ—Ç–æ–≤–æ", "todo": "‚úçÔ∏è –∑–∞–ø–æ–ª–Ω–∏—Ç—å"},
    "traffic": {"done": "üü¢ –≥–æ—Ç–æ–≤–æ", "todo": "üü† –∑–∞–ø–æ–ª–Ω–∏—Ç—å"},
    "text": {"done": "[–≥–æ—Ç–æ–≤–æ]", "todo": "[–∑–∞–ø–æ–ª–Ω–∏—Ç—å]"},
}


def status_badge(done: bool) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å —Å—Ç–∞—Ç—É—Å–∞ —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è."""

    style = STATUS_SETS.get(STATUS_STYLE, STATUS_SETS["emoji"])
    return style["done"] if done else style["todo"]


def _line(label: str, done: bool) -> str:
    """–°—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–∞ –∏ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è."""

    return f"{label} ‚Äî {status_badge(done)}"


def _keyboard(
    expenses_ok: bool,
    materials_ok: bool,
    crew_ok: bool,
    *,
    close_enabled: bool,
) -> types.ReplyKeyboardMarkup:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é —Å–º–µ–Ω—ã."""

    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text=_line(BTN_EXPENSES_LABEL, expenses_ok))
    keyboard.button(text=_line(BTN_MATERIALS_LABEL, materials_ok))
    keyboard.button(text=_line(BTN_CREW_LABEL, crew_ok))
    if close_enabled:
        keyboard.button(text=BTN_CLOSE_SHIFT)
    keyboard.button(text=BTN_BACK)
    layout = [1, 1, 1]
    if close_enabled:
        layout.append(1)
    layout.append(1)
    keyboard.adjust(*layout)
    return keyboard.as_markup(resize_keyboard=True)


async def render_shift_menu(
    message: types.Message,
    user_id: int,
    row: int | None,
    service: SheetsService | None = None,
    *,
    delete_trigger_message: bool = True,
    show_progress: bool = True,
) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å–º–µ–Ω—ã, —Å–æ–∑–¥–∞–≤–∞—è —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""

    sheets = _resolve_service(service)

    if delete_trigger_message:
        await safe_delete(message)

    progress_message = (
        await send_progress(message, "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")
        if show_progress
        else None
    )

    row_index = row
    progress: dict[str, bool] | None = None
    lock = None
    try:
        if row_index is None:
            lock = await acquire_user_lock(user_id)
            if lock is None:
                await message.answer(
                    "–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
                )
                return

            try:
                row_index = await asyncio.to_thread(
                    sheets.open_shift_for_user, user_id
                )
            except Exception:  # noqa: BLE001
                logger.exception(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–æ–∫—É —Å–º–µ–Ω—ã (user_id=%s)", user_id
                )
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–º–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
                )
                return

        progress = await asyncio.to_thread(
            sheets.get_shift_progress, user_id, row_index
        )
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–º–µ–Ω—ã (user_id=%s)", user_id)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return
    finally:
        if lock is not None:
            release_user_lock(lock)
        await safe_delete(progress_message)

    if progress is None or row_index is None:
        return

    try:
        shift_closed = await asyncio.to_thread(
            sheets.is_shift_closed, row_index
        )
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–∫—Ä—ã—Ç–∞ –ª–∏ —Å–º–µ–Ω–∞ (user_id=%s, row=%s)",
            user_id,
            row_index,
        )
        shift_closed = False

    close_enabled = all(progress.values()) and not shift_closed

    base_text = (
        "–≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
        "–≤ –∫–∞–∂–¥–æ–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ."
    )
    if shift_closed:
        base_text += (
            "\n\n—Å–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞. –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é ‚Äî –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
    await message.answer(
        base_text,
        reply_markup=_keyboard(
            expenses_ok=progress["expenses"],
            materials_ok=progress["materials"],
            crew_ok=progress["crew"],
            close_enabled=close_enabled,
        ),
    )


@router.message(lambda msg: msg.text == BTN_BACK)
async def back_to_main(message: types.Message) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é."""

    from features.main_menu import show_menu

    await safe_delete(message)
    await show_menu(message)


@router.message(lambda msg: msg.text.startswith(BTN_EXPENSES_LABEL))
async def go_expenses(message: types.Message, state: FSMContext) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–†–∞—Å—Ö–æ–¥—ã¬ª."""

    from features.expenses import start_expenses

    await start_expenses(message, state)


@router.message(lambda msg: msg.text.startswith(BTN_MATERIALS_LABEL))
async def go_materials(message: types.Message, state: FSMContext) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–ú–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª."""

    from features.materials import start_materials

    await start_materials(message, state)


@router.message(lambda msg: msg.text.startswith(BTN_CREW_LABEL))
async def go_crew(message: types.Message, state: FSMContext) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–ë—Ä–∏–≥–∞–¥–∞¬ª."""

    from features.crew import start_crew

    await start_crew(message, state)


def _format_number(value: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π —Ç—ã—Å—è—á."""

    return f"{value:,}".replace(",", " ")


def _format_date_for_summary(date_value: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì, –µ—Å–ª–∏ —É–¥–∞—ë—Ç—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å ISO-—Å—Ç—Ä–æ–∫—É."""

    text = (date_value or "").strip()
    if not text:
        return "‚Äî"
    for pattern in ("%Y-%m-%d", "%Y-%m-%dT%H:%M:%S", "%d.%m.%Y"):
        try:
            parsed = datetime.strptime(text, pattern)
            return parsed.strftime("%d.%m.%Y")
        except ValueError:
            continue
    return text


def build_group_report(brigadier: str, summary: dict[str, object]) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞."""

    expenses = summary.get("expenses", {}) if isinstance(summary, dict) else {}
    materials = summary.get("materials", {}) if isinstance(summary, dict) else {}

    date_text = _format_date_for_summary(str(summary.get("date", "")))
    ship = str(summary.get("ship", "")).strip() or "‚Äî"

    total_amount = 0
    if isinstance(expenses, dict):
        for key in ("driver", "brigadier", "workers", "aux", "food", "taxi", "other"):
            try:
                total_amount += int(expenses.get(key, 0) or 0)
            except (TypeError, ValueError):
                continue
    total_text = _format_number(total_amount)

    photos_link = "‚Äî"
    if isinstance(materials, dict):
        link_candidate = materials.get("photos_link")
        if isinstance(link_candidate, str) and link_candidate.strip():
            photos_link = link_candidate.strip()

    brigadier_line = brigadier.strip() if brigadier and brigadier.strip() else "‚Äî"

    lines = [
        "‚úÖ –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞",
        "",
        f"üë∑‚Äç‚ôÇÔ∏è –ë—Ä–∏–≥–∞–¥–∏—Ä: {brigadier_line}",
        f"üìÖ –î–∞—Ç–∞: {date_text}",
        f"üõ≥ –°—É–¥–Ω–æ: {ship}",
        f"üí∞ –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_text} ‚ÇΩ",
        f"üì∑ –§–æ—Ç–æ: {photos_link}",
        "",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!",
    ]
    return "\n".join(lines)


@router.message(F.text == BTN_CLOSE_SHIFT)
async def close_shift(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–¥–∫–∏."""

    user_id = message.from_user.id
    sheets = _resolve_service(None)

    try:
        row = await asyncio.to_thread(
            sheets.get_shift_row_index_for_user, user_id
        )
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å–º–µ–Ω—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (user_id=%s)",
            user_id,
        )
        await message.answer(
            "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–±–æ—á—É—é —Å—Ç—Ä–æ–∫—É. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return

    if not row:
        await message.answer(
            "—Ä–∞–±–æ—á–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –Ω–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        return

    try:
        already_closed = await asyncio.to_thread(sheets.is_shift_closed, row)
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã (user_id=%s, row=%s)",
            user_id,
            row,
        )
        await message.answer(
            "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–º–µ–Ω—ã. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    if already_closed:
        await message.answer("—Å–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
        return

    try:
        progress = await asyncio.to_thread(
            sheets.get_shift_progress, user_id, row
        )
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–º–µ–Ω—ã –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º (user_id=%s, row=%s)",
            user_id,
            row,
        )
        await message.answer(
            "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–æ–≤. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    if not all(progress.values()):
        await message.answer(
            "–Ω–µ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞–∑–¥–µ–ª—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    profile = None
    try:
        profile = await asyncio.to_thread(sheets.get_user_profile, user_id)
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º (user_id=%s)",
            user_id,
        )

    try:
        summary = await asyncio.to_thread(sheets.get_shift_summary, row)
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ–¥–∫—É —Å–º–µ–Ω—ã (user_id=%s, row=%s)",
            user_id,
            row,
        )
        await message.answer(
            "–Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    try:
        closed_now = await asyncio.to_thread(
            sheets.finalize_shift, user_id, row
        )
    except Exception:  # noqa: BLE001
        logger.exception(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã (user_id=%s, row=%s)", user_id, row
        )
        await message.answer(
            "–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return

    if not closed_now:
        await message.answer("—Å–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
        return

    notifications_enabled = group_notifications_enabled()
    group_sent = False
    if notifications_enabled:
        crew_info = summary.get("crew") if isinstance(summary, dict) else None
        brigadier_name = ""
        if isinstance(crew_info, dict):
            name_candidate = crew_info.get("brigadier")
            if isinstance(name_candidate, str) and name_candidate.strip():
                brigadier_name = name_candidate.strip()
        if not brigadier_name and profile is not None:
            brigadier_name = profile.fio or profile.fio_compact
        if not brigadier_name:
            brigadier_name = (
                message.from_user.full_name
                or message.from_user.username
                or str(user_id)
            )
        report_text = build_group_report(brigadier_name, summary)
        try:
            await message.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=report_text,
            )
            group_sent = True
        except Exception:  # noqa: BLE001
            logger.exception(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç %s", GROUP_CHAT_ID
            )

    confirmation = (
        "—Å–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞. –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç."
        if group_sent
        else "—Å–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞."
    )
    await message.answer(confirmation + "\n–≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ä¶")

    from features.main_menu import show_menu

    await show_menu(message, service=sheets)
