"""–°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–ë—Ä–∏–≥–∞–¥–∞¬ª —Å –≤—ã–±–æ—Ä–æ–º –≤–æ–¥–∏—Ç–µ–ª—è –∏ —Ä–∞–±–æ—á–∏—Ö."""

from __future__ import annotations

import asyncio
import logging
from math import ceil
from typing import Any

from aiogram import F, Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from features.utils.messaging import safe_delete
from services.sheets import (
    SheetsService,
    format_compact_fio,
    validate_name_piece,
)

router = Router()
logger = logging.getLogger(__name__)
_service: SheetsService | None = None

BTN_BACK = "‚¨Ö –Ω–∞–∑–∞–¥"
BTN_HOME = "üè† –≤ –º–µ–Ω—é"
BTN_ADD_DRIVER = "‚ûï –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è"
BTN_ADD_WORKER = "‚ûï –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–≥–æ"
BTN_PAGE_PREV = "‚Äπ –ø—Ä–µ–¥—ã–¥—É—â–∞—è"
BTN_PAGE_NEXT = "—Å–ª–µ–¥—É—é—â–∞—è ‚Ä∫"
BTN_CONFIRM = "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
BTN_EDIT = "‚úèÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å"
BTN_CLEAR_WORKERS = "üßπ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö"
BTN_SKIP = "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
BTN_NEXT = "‚û° –¥–∞–ª–µ–µ"
PAGE_SIZE = 25
REMOVE_PREFIX = "crew:del:"


class CrewStates(StatesGroup):
    """–®–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–∞–≤–∞ –±—Ä–∏–≥–∞–¥—ã."""

    choose_driver = State()
    add_driver_lastname = State()
    add_driver_firstname = State()
    add_driver_middlename = State()
    choose_workers = State()
    add_worker_lastname = State()
    add_worker_firstname = State()
    add_worker_middlename = State()
    confirm = State()


def _get_service() -> SheetsService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–µ–Ω–∏–≤–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å Google Sheets."""

    global _service
    if _service is None:
        _service = SheetsService()
    return _service


def _render_shift_menu(*args: Any, **kwargs: Any) -> Any:
    """–õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç –º–µ–Ω—é —Å–º–µ–Ω—ã –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""

    from features.shift_menu import render_shift_menu

    return render_shift_menu(*args, **kwargs)


def _nav_keyboard(extra: list[str] | None = None) -> types.ReplyKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""

    builder = ReplyKeyboardBuilder()
    if extra:
        builder.row(*(types.KeyboardButton(text=item) for item in extra))
    builder.row(
        types.KeyboardButton(text=BTN_BACK),
        types.KeyboardButton(text=BTN_HOME),
    )
    return builder.as_markup(resize_keyboard=True)


def _paginate(items: list[str], page: int) -> tuple[list[str], int, int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""

    if not items:
        return [], 0, 0
    total_pages = max(1, ceil(len(items) / PAGE_SIZE))
    page = max(0, min(page, total_pages - 1))
    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    return items[start:end], page, total_pages


def _driver_keyboard(
    drivers: list[str], page: int, has_selection: bool
) -> tuple[types.ReplyKeyboardMarkup, int, int]:
    """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""

    page_items, actual_page, total_pages = _paginate(drivers, page)
    builder = ReplyKeyboardBuilder()
    for name in page_items:
        builder.row(types.KeyboardButton(text=name))
    if total_pages > 1:
        nav_buttons: list[types.KeyboardButton] = []
        if actual_page > 0:
            nav_buttons.append(types.KeyboardButton(text=BTN_PAGE_PREV))
        if actual_page < total_pages - 1:
            nav_buttons.append(types.KeyboardButton(text=BTN_PAGE_NEXT))
        if nav_buttons:
            builder.row(*nav_buttons)
    builder.row(types.KeyboardButton(text=BTN_ADD_DRIVER))
    if has_selection:
        builder.row(types.KeyboardButton(text=BTN_NEXT))
    builder.row(
        types.KeyboardButton(text=BTN_BACK),
        types.KeyboardButton(text=BTN_HOME),
    )
    return builder.as_markup(resize_keyboard=True), actual_page, total_pages


def _workers_keyboard(
    workers: list[str], page: int
) -> tuple[types.ReplyKeyboardMarkup, int, int]:
    """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö."""

    page_items, actual_page, total_pages = _paginate(workers, page)
    builder = ReplyKeyboardBuilder()
    for name in page_items:
        builder.row(types.KeyboardButton(text=name))
    if total_pages > 1:
        nav_buttons: list[types.KeyboardButton] = []
        if actual_page > 0:
            nav_buttons.append(types.KeyboardButton(text=BTN_PAGE_PREV))
        if actual_page < total_pages - 1:
            nav_buttons.append(types.KeyboardButton(text=BTN_PAGE_NEXT))
        if nav_buttons:
            builder.row(*nav_buttons)
    builder.row(types.KeyboardButton(text=BTN_ADD_WORKER))
    builder.row(types.KeyboardButton(text=BTN_CLEAR_WORKERS))
    builder.row(types.KeyboardButton(text=BTN_CONFIRM))
    builder.row(
        types.KeyboardButton(text=BTN_BACK),
        types.KeyboardButton(text=BTN_HOME),
    )
    return builder.as_markup(resize_keyboard=True), actual_page, total_pages


async def _clear_workers_message(message: types.Message, state: FSMContext) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å."""

    data = await state.get_data()
    msg_id = data.get("workers_message_id")
    if not msg_id:
        return
    try:
        await message.bot.delete_message(message.chat.id, msg_id)
    except TelegramBadRequest:
        pass
    except Exception:  # noqa: BLE001
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö", exc_info=True)
    await state.update_data(workers_message_id=None)


async def _update_selected_workers_view(
    message: types.Message, state: FSMContext
) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –∏ inline-–∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è."""

    data = await state.get_data()
    selected: list[str] = data.get("selected_workers", []) or []
    msg_id = data.get("workers_message_id")

    if not selected:
        text = "—Ä–∞–±–æ—á–∏–µ –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã."
        markup = None
    else:
        lines = [
            "–≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ:",
            *(f"{idx + 1}) {name}" for idx, name in enumerate(selected)),
        ]
        text = "\n".join(lines)
        builder = InlineKeyboardBuilder()
        for idx, name in enumerate(selected):
            builder.button(text=f"‚úñ {name}", callback_data=f"{REMOVE_PREFIX}{idx}")
        builder.adjust(1)
        markup = builder.as_markup()

    try:
        if msg_id:
            await message.bot.edit_message_text(
                text,
                chat_id=message.chat.id,
                message_id=msg_id,
                reply_markup=markup,
            )
        else:
            sent = await message.answer(text, reply_markup=markup)
            await state.update_data(workers_message_id=sent.message_id)
    except TelegramBadRequest:
        if msg_id:
            try:
                await message.bot.delete_message(message.chat.id, msg_id)
            except Exception:  # noqa: BLE001
                logger.debug(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–∞–±–æ—á–∏—Ö",
                    exc_info=True,
                )
        sent = await message.answer(text, reply_markup=markup)
        await state.update_data(workers_message_id=sent.message_id)


async def _return_to_shift_menu(message: types.Message, state: FSMContext) -> None:
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Å–º–µ–Ω—ã."""

    data = await state.get_data()
    user_id = data.get("user_id", message.from_user.id)
    row = data.get("row")
    await _clear_workers_message(message, state)
    await state.clear()
    await _render_shift_menu(
        message,
        user_id,
        row,
        state=state,
        delete_trigger_message=False,
        show_progress=False,
    )


async def _go_home(message: types.Message, state: FSMContext) -> None:
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""

    from features.main_menu import show_menu

    await _clear_workers_message(message, state)
    await state.clear()
    await show_menu(message, state=state)


async def _refresh_drivers(state: FSMContext) -> list[str]:
    """–ß–∏—Ç–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏."""

    service = _get_service()
    drivers = await asyncio.to_thread(service.list_active_drivers)
    await state.update_data(drivers=drivers)
    return drivers


async def _refresh_workers(state: FSMContext) -> list[str]:
    """–ß–∏—Ç–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏."""

    service = _get_service()
    workers = await asyncio.to_thread(service.list_active_workers)
    await state.update_data(workers=workers)
    return workers


async def _resolve_user_id(
    message: types.Message,
    state: FSMContext,
    provided: int | None = None,
) -> int | None:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π user_id –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è."""

    if provided is not None:
        return provided

    if message.from_user and not message.from_user.is_bot:
        return message.from_user.id

    data = await state.get_data()
    for key in ("user_id", "_shift_user_id"):
        candidate = data.get(key)
        if isinstance(candidate, int):
            return candidate
        if isinstance(candidate, str) and candidate.isdigit():
            return int(candidate)

    if message.chat and message.chat.type == "private":
        return message.chat.id
    return None


@router.message(Command("crew"))
async def start_crew(
    message: types.Message,
    state: FSMContext,
    *,
    user_id: int | None = None,
) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –±—Ä–∏–≥–∞–¥—ã."""

    await safe_delete(message)
    actual_user_id = await _resolve_user_id(message, state, user_id)
    if actual_user_id is None:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        await state.clear()
        return
    service = _get_service()

    try:
        row = await asyncio.to_thread(service.get_shift_row_index_for_user, actual_user_id)
        if row is None:
            row = await asyncio.to_thread(service.open_shift_for_user, actual_user_id)
        drivers = await asyncio.to_thread(service.list_active_drivers)
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∞ ¬´–ë—Ä–∏–≥–∞–¥–∞¬ª (user_id=%s)",
            actual_user_id,
        )
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª ¬´–ë—Ä–∏–≥–∞–¥–∞¬ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        await state.clear()
        return

    await state.update_data(
        user_id=actual_user_id,
        row=row,
        drivers=drivers,
        driver_page=0,
        selected_driver=None,
        workers=[],
        worker_page=0,
        selected_workers=[],
        workers_message_id=None,
    )
    await ask_driver(message, state)


async def ask_driver(message: types.Message, state: FSMContext, *, refresh: bool = False) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞."""

    if refresh:
        drivers = await _refresh_drivers(state)
    else:
        data = await state.get_data()
        drivers = data.get("drivers")
        if drivers is None:
            drivers = await _refresh_drivers(state)
    data = await state.get_data()
    selected_driver = data.get("selected_driver")
    selected_workers = data.get("selected_workers", []) or []
    page = data.get("driver_page", 0)

    keyboard, actual_page, total_pages = _driver_keyboard(
        drivers, page, bool(selected_driver)
    )
    await state.update_data(driver_page=actual_page)

    lines = [
        "–≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ.",
        f"—Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: {selected_driver or '–Ω–µ –≤—ã–±—Ä–∞–Ω'}.",
        f"—Ä–∞–±–æ—á–∏—Ö –≤—ã–±—Ä–∞–Ω–æ: {len(selected_workers)}.",
    ]
    if total_pages > 1:
        lines.append(f"—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {actual_page + 1} –∏–∑ {total_pages}.")
    if not drivers:
        lines.append("—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è.")

    await state.set_state(CrewStates.choose_driver)
    await message.answer("\n".join(lines), reply_markup=keyboard)


async def ask_workers(
    message: types.Message,
    state: FSMContext,
    *,
    refresh: bool = False,
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö."""

    data = await state.get_data()
    driver = data.get("selected_driver")
    if not driver:
        await message.answer("—Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è.")
        await ask_driver(message, state)
        return

    if refresh:
        workers = await _refresh_workers(state)
    else:
        workers = data.get("workers")
        if workers is None:
            workers = await _refresh_workers(state)

    selected_workers: list[str] = data.get("selected_workers", []) or []
    active_keys = {item.casefold() for item in workers}
    filtered_workers = [w for w in selected_workers if w.casefold() in active_keys]
    if filtered_workers != selected_workers:
        selected_workers = filtered_workers
        await state.update_data(selected_workers=selected_workers)

    page = data.get("worker_page", 0)
    keyboard, actual_page, total_pages = _workers_keyboard(workers, page)
    await state.update_data(worker_page=actual_page)

    lines = [
        f"–≤–æ–¥–∏—Ç–µ–ª—å: {driver}",
        f"—Ä–∞–±–æ—á–∏–µ –≤—ã–±—Ä–∞–Ω—ã: {len(selected_workers)}.",
        "–≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏—Ö –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã—Ö.",
    ]
    if total_pages > 1:
        lines.append(f"—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {actual_page + 1} –∏–∑ {total_pages}.")
    if not workers:
        lines.append("—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –¥–æ–±–∞–≤—å—Ç–µ —Ä–∞–±–æ—á–µ–≥–æ.")

    await state.set_state(CrewStates.choose_workers)
    await message.answer("\n".join(lines), reply_markup=keyboard)
    await _update_selected_workers_view(message, state)


def _match_choice(candidates: list[str], text: str) -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, —Å–æ–≤–ø–∞–≤—à–µ–µ –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞."""

    lowered = text.casefold()
    for name in candidates:
        if name.casefold() == lowered:
            return name
    return None


@router.message(CrewStates.choose_driver)
async def handle_driver_choice(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–æ–¥–∏—Ç–µ–ª—è –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å–ø–∏—Å–∫—É."""

    await safe_delete(message)
    text = (message.text or "").strip()

    if text == BTN_HOME:
        await _go_home(message, state)
        return
    if text == BTN_BACK:
        await _return_to_shift_menu(message, state)
        return

    data = await state.get_data()
    drivers: list[str] = data.get("drivers", []) or []
    page = data.get("driver_page", 0)

    if text == BTN_PAGE_PREV:
        await state.update_data(driver_page=max(0, page - 1))
        await ask_driver(message, state)
        return
    if text == BTN_PAGE_NEXT:
        await state.update_data(driver_page=page + 1)
        await ask_driver(message, state)
        return
    if text == BTN_ADD_DRIVER:
        await state.update_data(new_driver={})
        await ask_new_driver_lastname(message, state)
        return
    if text == BTN_NEXT:
        if data.get("selected_driver"):
            await ask_workers(message, state)
        else:
            await message.answer("—Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    if not drivers:
        await message.answer("—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è.")
        return

    choice = _match_choice(drivers, text)
    if not choice:
        await message.answer("–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è.")
        return

    await state.update_data(selected_driver=choice)
    await message.answer(f"–≤–æ–¥–∏—Ç–µ–ª—å ¬´{choice}¬ª –≤—ã–±—Ä–∞–Ω.")
    await ask_workers(message, state)


@router.message(CrewStates.choose_workers)
async def handle_worker_choice(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–±–æ—á–∏—Ö, –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è."""

    await safe_delete(message)
    text = (message.text or "").strip()

    if text == BTN_HOME:
        await _go_home(message, state)
        return
    if text == BTN_BACK:
        await state.update_data(worker_page=0)
        await _clear_workers_message(message, state)
        await ask_driver(message, state)
        return

    data = await state.get_data()
    workers: list[str] = data.get("workers", []) or []
    page = data.get("worker_page", 0)
    selected_workers: list[str] = data.get("selected_workers", []) or []

    if text == BTN_PAGE_PREV:
        await state.update_data(worker_page=max(0, page - 1))
        await ask_workers(message, state)
        return
    if text == BTN_PAGE_NEXT:
        await state.update_data(worker_page=page + 1)
        await ask_workers(message, state)
        return
    if text == BTN_ADD_WORKER:
        await state.update_data(new_worker={})
        await ask_new_worker_lastname(message, state)
        return
    if text == BTN_CLEAR_WORKERS:
        await state.update_data(selected_workers=[])
        await _update_selected_workers_view(message, state)
        await message.answer("—Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –æ—á–∏—â–µ–Ω.")
        return
    if text == BTN_CONFIRM:
        if not data.get("selected_driver"):
            await message.answer("—Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è.")
            await ask_driver(message, state)
            return
        if not selected_workers:
            await message.answer("–Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ.")
            return
        await ask_confirm(message, state)
        return

    if not workers:
        await message.answer("—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –¥–æ–±–∞–≤—å—Ç–µ —Ä–∞–±–æ—á–µ–≥–æ.")
        return

    choice = _match_choice(workers, text)
    if not choice:
        await message.answer("–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ.")
        return

    if any(worker.casefold() == choice.casefold() for worker in selected_workers):
        await message.answer("—ç—Ç–æ—Ç —Ä–∞–±–æ—á–∏–π —É–∂–µ –≤—ã–±—Ä–∞–Ω.")
        return

    selected_workers.append(choice)
    await state.update_data(selected_workers=selected_workers)
    await message.answer(f"—Ä–∞–±–æ—á–∏–π ¬´{choice}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")
    await _update_selected_workers_view(message, state)


@router.callback_query(F.data.startswith(REMOVE_PREFIX))
async def handle_worker_removal(
    callback: types.CallbackQuery, state: FSMContext
) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Ä–∞–±–æ—á–µ–≥–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é inline-–∫–Ω–æ–ø–∫–∏."""

    data = await state.get_data()
    selected: list[str] = data.get("selected_workers", []) or []
    payload = callback.data or ""
    index_text = payload[len(REMOVE_PREFIX) :]

    try:
        index = int(index_text)
    except ValueError:
        await callback.answer("–Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=False)
        return

    if index < 0 or index >= len(selected):
        await callback.answer("–Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=False)
        return

    removed = selected.pop(index)
    await state.update_data(selected_workers=selected)

    if callback.message:
        await _update_selected_workers_view(callback.message, state)

    await callback.answer(f"–£–¥–∞–ª–µ–Ω–æ: {removed}")


async def ask_new_driver_lastname(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è."""

    await state.set_state(CrewStates.add_driver_lastname)
    await message.answer("–≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –≤–æ–¥–∏—Ç–µ–ª—è.", reply_markup=_nav_keyboard())


@router.message(CrewStates.add_driver_lastname)
async def handle_new_driver_lastname(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è."""

    await safe_delete(message)
    text = (message.text or "").strip()

    if text == BTN_HOME:
        await _go_home(message, state)
        return
    if text == BTN_BACK:
        await ask_driver(message, state)
        return

    try:
        last = validate_name_piece(text)
    except ValueError:
        await message.answer("–≤ —ç—Ç–æ–º –ø–æ–ª–µ –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª –∏ –¥–µ—Ñ–∏—Å")
        return

    await state.update_data(new_driver={"last": last})
    await ask_new_driver_firstname(message, state)


async def ask_new_driver_firstname(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è."""

    await state.set_state(CrewStates.add_driver_firstname)
    await message.answer("–≤–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è.", reply_markup=_nav_keyboard())


@router.message(CrewStates.add_driver_firstname)
async def handle_new_driver_firstname(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è."""

    await safe_delete(message)
    text = (message.text or "").strip()

    if text == BTN_HOME:
        await _go_home(message, state)
        return
    if text == BTN_BACK:
        await ask_new_driver_lastname(message, state)
        return

    try:
        first = validate_name_piece(text)
    except ValueError:
        await message.answer("–≤ —ç—Ç–æ–º –ø–æ–ª–µ –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª –∏ –¥–µ—Ñ–∏—Å")
        return

    data = await state.get_data()
    payload = data.get("new_driver", {})
    payload["first"] = first
    await state.update_data(new_driver=payload)
    await ask_new_driver_middlename(message, state)


async def ask_new_driver_middlename(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç—á–µ—Å—Ç–≤–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è."""

    await state.set_state(CrewStates.add_driver_middlename)
    await message.answer(
        "–≤–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ –≤–æ–¥–∏—Ç–µ–ª—è (–º–æ–∂–Ω–æ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª).",
        reply_markup=_nav_keyboard([BTN_SKIP]),
    )


@router.message(CrewStates.add_driver_middlename)
async def handle_new_driver_middlename(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è."""

    await safe_delete(message)
    text = (message.text or "").strip()

    if text == BTN_HOME:
        await _go_home(message, state)
        return
    if text == BTN_BACK:
        await ask_new_driver_firstname(message, state)
        return

    data = await state.get_data()
    payload = data.get("new_driver", {})
    last = (payload or {}).get("last")
    first = (payload or {}).get("first")

    if not last or not first:
        await message.answer("–¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ—Ç–µ—Ä—è–Ω—ã. –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await ask_driver(message, state, refresh=True)
        return

    if text == BTN_SKIP:
        middle = ""
    else:
        try:
            middle = validate_name_piece(text)
        except ValueError:
            await message.answer("–≤ —ç—Ç–æ–º –ø–æ–ª–µ –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª –∏ –¥–µ—Ñ–∏—Å")
            return

    await state.update_data(new_driver=None)
    await _finalize_new_driver(message, state, last, first, middle)


async def _finalize_new_driver(
    message: types.Message,
    state: FSMContext,
    last: str,
    first: str,
    middle: str,
) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–∞–±–æ—á–∏—Ö."""

    short_name = format_compact_fio(last, first, middle)
    service = _get_service()

    try:
        status = await asyncio.to_thread(service.get_driver_status, short_name)
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è %s", short_name)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        await ask_driver(message, state, refresh=True)
        return

    if status is not None:
        msg = "—ç—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞—Ä—Ö–∏–≤–µ." if status.strip().lower() == "–∞—Ä—Ö–∏–≤" else "—Ç–∞–∫–æ–µ –§–ò–û —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ."
        await message.answer(msg)
        await ask_driver(message, state, refresh=True)
        return

    try:
        await asyncio.to_thread(service.add_driver, short_name)
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è %s", short_name)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        await ask_driver(message, state, refresh=True)
        return

    await _refresh_drivers(state)
    await state.update_data(selected_driver=short_name, driver_page=0)
    await message.answer(f"–≤–æ–¥–∏—Ç–µ–ª—å ¬´{short_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –∏ –≤—ã–±—Ä–∞–Ω.")
    await ask_workers(message, state, refresh=True)


async def ask_new_worker_lastname(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∞–º–∏–ª–∏—é –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ."""

    await state.set_state(CrewStates.add_worker_lastname)
    await message.answer("–≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Ä–∞–±–æ—á–µ–≥–æ.", reply_markup=_nav_keyboard())


@router.message(CrewStates.add_worker_lastname)
async def handle_new_worker_lastname(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ."""

    await safe_delete(message)
    text = (message.text or "").strip()

    if text == BTN_HOME:
        await _go_home(message, state)
        return
    if text == BTN_BACK:
        await ask_workers(message, state)
        return

    try:
        last = validate_name_piece(text)
    except ValueError:
        await message.answer("–≤ —ç—Ç–æ–º –ø–æ–ª–µ –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª –∏ –¥–µ—Ñ–∏—Å")
        return

    await state.update_data(new_worker={"last": last})
    await ask_new_worker_firstname(message, state)


async def ask_new_worker_firstname(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ."""

    await state.set_state(CrewStates.add_worker_firstname)
    await message.answer("–≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–∞–±–æ—á–µ–≥–æ.", reply_markup=_nav_keyboard())


@router.message(CrewStates.add_worker_firstname)
async def handle_new_worker_firstname(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ."""

    await safe_delete(message)
    text = (message.text or "").strip()

    if text == BTN_HOME:
        await _go_home(message, state)
        return
    if text == BTN_BACK:
        await ask_new_worker_lastname(message, state)
        return

    try:
        first = validate_name_piece(text)
    except ValueError:
        await message.answer("–≤ —ç—Ç–æ–º –ø–æ–ª–µ –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª –∏ –¥–µ—Ñ–∏—Å")
        return

    data = await state.get_data()
    payload = data.get("new_worker", {})
    payload["first"] = first
    await state.update_data(new_worker=payload)
    await ask_new_worker_middlename(message, state)


async def ask_new_worker_middlename(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ."""

    await state.set_state(CrewStates.add_worker_middlename)
    await message.answer(
        "–≤–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–µ–≥–æ (–º–æ–∂–Ω–æ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª).",
        reply_markup=_nav_keyboard([BTN_SKIP]),
    )


@router.message(CrewStates.add_worker_middlename)
async def handle_new_worker_middlename(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ."""

    await safe_delete(message)
    text = (message.text or "").strip()

    if text == BTN_HOME:
        await _go_home(message, state)
        return
    if text == BTN_BACK:
        await ask_new_worker_firstname(message, state)
        return

    data = await state.get_data()
    payload = data.get("new_worker", {})
    last = (payload or {}).get("last")
    first = (payload or {}).get("first")

    if not last or not first:
        await message.answer("–¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–µ—Ä—è–Ω—ã. –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await ask_workers(message, state, refresh=True)
        return

    if text == BTN_SKIP:
        middle = ""
    else:
        try:
            middle = validate_name_piece(text)
        except ValueError:
            await message.answer("–≤ —ç—Ç–æ–º –ø–æ–ª–µ –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª –∏ –¥–µ—Ñ–∏—Å")
            return

    await state.update_data(new_worker=None)
    await _finalize_new_worker(message, state, last, first, middle)


async def _finalize_new_worker(
    message: types.Message,
    state: FSMContext,
    last: str,
    first: str,
    middle: str,
) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–±–æ—á–µ–≥–æ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∏ –æ—Ç–º–µ—á–∞–µ—Ç –µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º."""

    short_name = format_compact_fio(last, first, middle)
    service = _get_service()

    try:
        status = await asyncio.to_thread(service.get_worker_status, short_name)
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ä–∞–±–æ—á–µ–≥–æ %s", short_name)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–∞–±–æ—á–∏—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        await ask_workers(message, state, refresh=True)
        return

    if status is not None:
        msg = "—ç—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞—Ä—Ö–∏–≤–µ." if status.strip().lower() == "–∞—Ä—Ö–∏–≤" else "—Ç–∞–∫–æ–µ –§–ò–û —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ."
        await message.answer(msg)
        await ask_workers(message, state, refresh=True)
        return

    try:
        await asyncio.to_thread(service.add_worker, short_name)
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–≥–æ %s", short_name)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        await ask_workers(message, state, refresh=True)
        return

    await _refresh_workers(state)
    data = await state.get_data()
    selected_workers: list[str] = data.get("selected_workers", []) or []
    if not any(worker.casefold() == short_name.casefold() for worker in selected_workers):
        selected_workers.append(short_name)
    await state.update_data(selected_workers=selected_workers, worker_page=0)
    await message.answer(f"—Ä–∞–±–æ—á–∏–π ¬´{short_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –∏ –≤—ã–±—Ä–∞–Ω.")
    await ask_workers(message, state, refresh=True)


async def ask_confirm(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Å–æ—Å—Ç–∞–≤ –±—Ä–∏–≥–∞–¥—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º."""

    data = await state.get_data()
    driver = data.get("selected_driver")
    workers: list[str] = data.get("selected_workers", []) or []

    if not driver or not workers:
        await message.answer("—Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –∏ —Ä–∞–±–æ—á–∏—Ö.")
        await ask_workers(message, state)
        return

    lines = [
        "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–∞–≤ –±—Ä–∏–≥–∞–¥—ã:",
        f"–≤–æ–¥–∏—Ç–µ–ª—å: {driver}",
        "—Ä–∞–±–æ—á–∏–µ:",
        *(f"- {name}" for name in workers),
        "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?",
    ]

    builder = ReplyKeyboardBuilder()
    builder.row(types.KeyboardButton(text=BTN_CONFIRM))
    builder.row(types.KeyboardButton(text=BTN_EDIT))
    builder.row(types.KeyboardButton(text=BTN_BACK), types.KeyboardButton(text=BTN_HOME))

    await state.set_state(CrewStates.confirm)
    await message.answer("\n".join(lines), reply_markup=builder.as_markup(resize_keyboard=True))


@router.message(CrewStates.confirm)
async def handle_confirm(message: types.Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–∞–≤ –±—Ä–∏–≥–∞–¥—ã –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é."""

    await safe_delete(message)
    text = (message.text or "").strip()

    if text == BTN_HOME:
        await _go_home(message, state)
        return
    if text in {BTN_BACK, BTN_EDIT}:
        await ask_workers(message, state)
        return

    if text != BTN_CONFIRM:
        await message.answer("–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.")
        return

    data = await state.get_data()
    driver = data.get("selected_driver")
    workers: list[str] = data.get("selected_workers", []) or []
    row = data.get("row")
    user_id = data.get("user_id", message.from_user.id)

    if not driver or not workers or not row:
        await message.answer("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –µ—â—ë —Ä–∞–∑.")
        await ask_workers(message, state)
        return

    service = _get_service()
    try:
        await asyncio.to_thread(
            service.save_crew,
            row,
            driver=driver,
            workers=workers,
            telegram_id=user_id,
        )
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –±—Ä–∏–≥–∞–¥—ã (user_id=%s, row=%s)", user_id, row)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –±—Ä–∏–≥–∞–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return

    await _clear_workers_message(message, state)
    await state.clear()
    from features.shift_menu import mark_mode_done

    mark_mode_done(user_id, "crew")
    await message.answer("—Å–æ—Å—Ç–∞–≤ –±—Ä–∏–≥–∞–¥—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é —Å–º–µ–Ω—ã‚Ä¶")
    await _render_shift_menu(
        message,
        user_id,
        row,
        state=state,
        delete_trigger_message=False,
        show_progress=False,
    )
