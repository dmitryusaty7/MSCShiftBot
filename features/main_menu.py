"""–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é —Å–º–µ–Ω."""

from __future__ import annotations

import logging

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from features.shift_menu import render_shift_menu
from services.sheets import SheetsService, UserProfile

router = Router()
_service: SheetsService | None = None
logger = logging.getLogger(__name__)


def _get_service() -> SheetsService:
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏."""

    global _service
    if _service is None:
        _service = SheetsService()
    return _service


START_SHIFT_BTN = "üöÄ –ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã"


def _menu_keyboard() -> types.ReplyKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text=START_SHIFT_BTN)
    keyboard.adjust(1)
    return keyboard.as_markup(resize_keyboard=True)


async def show_menu(
    message: types.Message, service: SheetsService | None = None
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º."""

    user_id = message.from_user.id
    sheets = service or _get_service()

    try:
        profile: UserProfile = sheets.get_user_profile(user_id)
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –º–µ–Ω—é (user_id=%s)", user_id)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –ø–æ–∑–∂–µ "
            "–∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return

    text = f"–°–º–µ–Ω –∑–∞–∫—Ä—ã—Ç–æ: {profile.closed_shifts}."
    await message.answer(text, reply_markup=_menu_keyboard())


@router.message(Command("menu"))
async def handle_menu_command(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /menu –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏."""

    await show_menu(message)


@router.message(lambda msg: msg.text == START_SHIFT_BTN)
async def start_shift(message: types.Message) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—á—É—é —Å—Ç—Ä–æ–∫—É —Å–º–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    user_id = message.from_user.id
    service = _get_service()
    row_index = service.open_shift_for_user(user_id)
    await render_shift_menu(message, user_id, row_index, service=service)
