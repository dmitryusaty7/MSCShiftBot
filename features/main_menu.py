"""–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é —Å–º–µ–Ω."""

from __future__ import annotations

import asyncio
import logging

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from features.shift_menu import render_shift_menu
from features.utils.locks import acquire_user_lock, release_user_lock
from features.utils.messaging import safe_delete, send_progress
from services.sheets import (
    ShiftAlreadyOpenedError,
    SheetsService,
    UserProfile,
)

router = Router()
_service: SheetsService | None = None
logger = logging.getLogger(__name__)


def _get_service() -> SheetsService:
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏."""

    global _service
    if _service is None:
        _service = SheetsService()
    return _service


START_SHIFT_BTN = "üöÄ –ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã"


def _menu_keyboard() -> types.ReplyKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text=START_SHIFT_BTN)
    keyboard.adjust(1)
    return keyboard.as_markup(resize_keyboard=True)


async def show_menu(
    message: types.Message,
    service: SheetsService | None = None,
    *,
    state: FSMContext | None = None,
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º."""

    user_id = message.from_user.id
    sheets = service or _get_service()

    await safe_delete(message)
    progress_message = await send_progress(
        message, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶"
    )

    try:
        profile: UserProfile = await asyncio.to_thread(
            sheets.get_user_profile, user_id
        )
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –º–µ–Ω—é (user_id=%s)", user_id)
        await safe_delete(progress_message)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –ø–æ–∑–∂–µ "
            "–∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return

    await safe_delete(progress_message)

    fio_text = profile.fio.strip()
    suffix = "" if fio_text.endswith(".") else "."
    text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {fio_text}{suffix}\n\n"
        f"–°–º–µ–Ω –∑–∞–∫—Ä—ã—Ç–æ: {profile.closed_shifts}"
    )
    if state is not None:
        from features.shift_menu import ShiftState, reset_shift_session

        await state.set_state(ShiftState.IDLE)
        reset_shift_session(user_id)
    await message.answer(text, reply_markup=_menu_keyboard())


@router.message(Command("menu"))
async def handle_menu_command(message: types.Message, state: FSMContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /menu –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏."""

    await show_menu(message, state=state)


@router.message(lambda msg: msg.text == START_SHIFT_BTN)
async def start_shift(message: types.Message, state: FSMContext) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—á—É—é —Å—Ç—Ä–æ–∫—É —Å–º–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    user_id = message.from_user.id
    service = _get_service()
    lock = await acquire_user_lock(user_id)
    if lock is None:
        await safe_delete(message)
        await message.answer(
            "–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    await safe_delete(message)
    progress_message = await send_progress(
        message, "‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Å–º–µ–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶"
    )

    try:
        try:
            locked, _ = await asyncio.to_thread(
                service.check_today_shift_lock, user_id
            )
            if locked:
                await safe_delete(progress_message)
                progress_message = None
                await message.answer(
                    "–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ —Å–µ–≥–æ–¥–Ω—è. –ù–æ–≤—É—é —Å–º–µ–Ω—É –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–≤—Ç—Ä–∞."
                )
                return
            row_index = await asyncio.to_thread(
                service.open_shift_for_user, user_id
            )
        except ShiftAlreadyOpenedError:
            await safe_delete(progress_message)
            progress_message = None
            await message.answer(
                "–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ —Å–µ–≥–æ–¥–Ω—è. –ù–æ–≤—É—é —Å–º–µ–Ω—É –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–≤—Ç—Ä–∞."
            )
            return
        except Exception:  # noqa: BLE001
            logger.exception(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–º–µ–Ω—É (user_id=%s)", user_id
            )
            await safe_delete(progress_message)
            progress_message = None
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–º–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
            )
            return
        await safe_delete(progress_message)
        progress_message = None
        await render_shift_menu(
            message,
            user_id,
            row_index,
            service=service,
            state=state,
            delete_trigger_message=False,
            show_progress=True,
        )
    finally:
        await safe_delete(progress_message)
        release_user_lock(lock)
