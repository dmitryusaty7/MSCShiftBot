from __future__ import annotations
from dataclasses import dataclass
from typing import Dict, List, Optional

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, KeyboardButton, Message,
                           ReplyKeyboardMarkup, ReplyKeyboardRemove)

from .dependencies import sheets_service

router = Router()


@dataclass
class ActiveShift:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã."""

    rows: Dict[str, int]
    sections: Dict[str, bool]


class MainStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –±–æ—Ç–∞."""

    dashboard = State()
    shift_menu = State()
    closing_confirmation = State()


def dashboard_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã", callback_data="dashboard:start")]
        ]
    )


def shift_menu_keyboard(sections: Dict[str, bool]) -> InlineKeyboardMarkup:
    def mark(done: bool) -> str:
        return "‚úÖ" if done else "‚è≥"

    buttons = [
        [
            InlineKeyboardButton(
                text=f"üë• –°–æ—Å—Ç–∞–≤ –±—Ä–∏–≥–∞–¥—ã {mark(sections.get('crew', False))}",
                callback_data="shift_section:crew",
            )
        ],
        [
            InlineKeyboardButton(
                text=f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã {mark(sections.get('materials', False))}",
                callback_data="shift_section:materials",
            )
        ],
        [
            InlineKeyboardButton(
                text=f"üí∏ –†–∞—Å—Ö–æ–¥—ã {mark(sections.get('expenses', False))}",
                callback_data="shift_section:expenses",
            )
        ],
        [
            InlineKeyboardButton(
                text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
                callback_data="shift_section:close",
            )
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def build_keyboard(
    rows: Optional[List[List[str]]] = None,
    *,
    include_skip: bool = False,
) -> ReplyKeyboardMarkup:
    keyboard: List[List[KeyboardButton]] = []
    if rows:
        for row in rows:
            keyboard.append([KeyboardButton(text=value) for value in row])
    keyboard.append([KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"), KeyboardButton(text="–í –º–µ–Ω—é")])
    if include_skip:
        keyboard.append([KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def format_amount(value: str) -> str:
    cleaned = value.replace(" ", "") if value else ""
    if cleaned.isdigit():
        return f"{int(cleaned):,}".replace(",", " ")
    return value


async def go_to_shift_menu(message: Message, state: FSMContext, notice: str = "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é —Å–º–µ–Ω—ã.") -> None:
    data = await state.get_data()
    active_shift: Optional[ActiveShift] = data.get("active_shift")
    if not active_shift:
        await state.set_state(MainStates.dashboard)
        await message.answer(
            "–ê–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.",
            reply_markup=ReplyKeyboardRemove(),
        )
        await send_dashboard(message, state)
        return
    await state.set_state(MainStates.shift_menu)
    await message.answer(
        notice,
        reply_markup=shift_menu_keyboard(active_shift.sections),
    )


async def send_dashboard(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    user_row = data.get("user_row")
    if not user_row:
        user_row = await sheets_service.ensure_user_row(message.from_user.id)
        await state.update_data(user_row=user_row)

    info = await sheets_service.get_dashboard_info(user_row)
    text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {info['display_name']}!\n\n"
        "–≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç MSCBaltic.\n"
        f"–í—ã –∑–∞–∫—Ä—ã–ª–∏ {info['closed_count']} —Å–º–µ–Ω."
    )
    if info["last_closed"]:
        text += f"\n–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫—Ä—ã—Ç–∞—è —Å–º–µ–Ω–∞: {info['last_closed']}"
    await state.set_state(MainStates.dashboard)
    await message.answer(text, reply_markup=dashboard_keyboard())


@router.callback_query(F.data == "dashboard:start", MainStates.dashboard)
async def start_shift(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    user_row = data.get("user_row")
    if not user_row:
        user_row = await sheets_service.ensure_user_row(callback.from_user.id)
        await state.update_data(user_row=user_row)

    fio = await sheets_service.get_user_fio(user_row)
    if not fio:
        fio = callback.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    shift_rows = await sheets_service.append_shift_rows(callback.from_user.id, fio)
    active_shift = ActiveShift(
        rows={
            "expenses": shift_rows.expenses_row,
            "materials": shift_rows.materials_row,
            "crew": shift_rows.crew_row,
        },
        sections={"crew": False, "materials": False, "expenses": False},
    )
    await state.update_data(
        active_shift=active_shift,
        expenses_data=None,
        ships_directory=None,
        materials_data=None,
        materials_photos=None,
    )
    await state.set_state(MainStates.shift_menu)
    await callback.message.answer(
        "–°–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤.",
        reply_markup=shift_menu_keyboard(active_shift.sections),
    )
    await callback.answer()


@router.callback_query(F.data == "shift_section:close", MainStates.shift_menu)
async def handle_close_section(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    active_shift: Optional[ActiveShift] = data.get("active_shift")
    if not active_shift:
        await callback.answer("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    if all(active_shift.sections.values()):
        await state.set_state(MainStates.closing_confirmation)
        await callback.message.answer(
            "–í—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É",
                            callback_data="shift_close:confirm",
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∞",
                            callback_data="shift_close:cancel",
                        )
                    ],
                ]
            ),
        )
    else:
        await callback.answer("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º", show_alert=True)
    await callback.answer()


@router.callback_query(F.data == "shift_close:cancel", MainStates.closing_confirmation)
async def close_cancel(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    active_shift: Optional[ActiveShift] = data.get("active_shift")
    await state.set_state(MainStates.shift_menu)
    if active_shift:
        await callback.message.answer(
            "–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.",
            reply_markup=shift_menu_keyboard(active_shift.sections),
        )
    await callback.answer()


@router.callback_query(F.data == "shift_close:confirm", MainStates.closing_confirmation)
async def close_confirm(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    active_shift: Optional[ActiveShift] = data.get("active_shift")
    if not active_shift:
        await callback.answer("–ê–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", show_alert=True)
        return

    if not all(active_shift.sections.values()):
        await callback.answer("–ù–µ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã", show_alert=True)
        await state.set_state(MainStates.shift_menu)
        await callback.message.answer(
            "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Å–º–µ–Ω—ã.",
            reply_markup=shift_menu_keyboard(active_shift.sections),
        )
        return

    await sheets_service.finalize_shift(active_shift.rows["expenses"])
    user_row = data.get("user_row")
    if user_row:
        await sheets_service.update_closure_info(user_row)

    await state.set_state(MainStates.dashboard)
    await callback.message.answer("–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞!", reply_markup=ReplyKeyboardRemove())
    await send_dashboard(callback.message, state)
    await state.update_data(active_shift=None, selected_driver="", selected_workers=[])
    await callback.answer("–°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞")


@router.message(Command("help"))
async def help_command(message: Message) -> None:
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –∑–∞–ø—É—Å–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞"
    )
