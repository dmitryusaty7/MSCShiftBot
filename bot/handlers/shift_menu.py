"""–ú–µ–Ω—é —Å–º–µ–Ω—ã –Ω–∞ reply-–∫–Ω–æ–ø–∫–∞—Ö –∏ –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏."""

from __future__ import annotations

import asyncio
import logging
from dataclasses import dataclass
from datetime import date, datetime
from typing import Any

from aiogram import F, Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.keyboards.dashboard import (
    SHIFT_BACK_BUTTON,
    FINISH_SHIFT_BUTTON,
    shift_menu_keyboard,
)
from bot.utils.cleanup import send_screen_message
from bot.utils.flash import flash_message
from features.utils.locks import acquire_user_lock, release_user_lock
from features.utils.messaging import safe_delete
from services.env import group_notifications_enabled
from services.sheets import SheetsService

router = Router(name="shift-menu")

logger = logging.getLogger(__name__)
_service: SheetsService | None = None

GROUP_CHAT_ID = -1003298300145


class ShiftState(StatesGroup):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã."""

    IDLE = State()
    ACTIVE = State()


class Mode(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø–æ–¥—Ä–µ–∂–∏–º—ã —Å–º–µ–Ω—ã."""

    EXPENSES = State()
    MATERIALS = State()
    CREW = State()


@dataclass
class ShiftSession:
    """–ö–µ—à –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–º–µ–Ω–µ."""

    date: str
    row: int
    modes: dict[str, bool]
    closed: bool = False


_sessions: dict[int, ShiftSession] = {}

MODE_KEYS = {
    "expenses": "expenses",
    "materials": "materials",
    "crew": "crew",
}


def _get_service() -> SheetsService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç) –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä SheetsService."""

    global _service
    if _service is None:
        _service = SheetsService()
    return _service


def _resolve_service(service: SheetsService | None) -> SheetsService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–ª–∏ –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä."""

    global _service
    if service is not None:
        _service = service
        return service
    return _get_service()


def status_badge(done: bool) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–¥–µ–ª–∞."""

    return "‚úÖ –≥–æ—Ç–æ–≤–æ" if done else "‚úçÔ∏è –∑–∞–ø–æ–ª–Ω–∏—Ç—å"


def _line(label: str, done: bool) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—é."""

    return f"{label} ‚Äî {status_badge(done)}"


def reset_shift_session(user_id: int) -> None:
    """–û—á–∏—â–∞–µ—Ç –∫–µ—à –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    _sessions.pop(user_id, None)


def _sync_session(
    user_id: int,
    *,
    row: int,
    progress: dict[str, bool],
    shift_date: str,
    closed: bool,
) -> ShiftSession:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏."""

    session = _sessions.get(user_id)
    if session is None or session.date != shift_date:
        session = ShiftSession(
            date=shift_date,
            row=row,
            modes={key: bool(progress.get(key, False)) for key in MODE_KEYS.values()},
            closed=closed,
        )
        _sessions[user_id] = session
    else:
        session.row = row
        session.closed = closed
        for key in MODE_KEYS.values():
            if key in progress:
                session.modes[key] = bool(progress[key])
    return session


def mark_mode_done(user_id: int, mode: str) -> None:
    """–ü–æ–º–µ—á–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–µ—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    session = _sessions.get(user_id)
    key = MODE_KEYS.get(mode)
    if session and key:
        session.modes[key] = True


def mark_shift_closed(user_id: int) -> None:
    """–ü–æ–º–µ—á–∞–µ—Ç —Å–º–µ–Ω—É –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—É—é –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–µ—à–µ."""

    session = _sessions.get(user_id)
    if session:
        session.closed = True


def _format_date_for_summary(date_value: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –¥–∞—Ç—É –∫ —Ñ–æ—Ä–º–∞—Ç—É –î–î.–ú–ú.–ì–ì–ì–ì –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""

    text = (date_value or "").strip()
    if not text:
        return "‚Äî"
    for pattern in ("%Y-%m-%d", "%Y-%m-%dT%H:%M:%S", "%d.%m.%Y"):
        try:
            parsed = datetime.strptime(text, pattern)
            return parsed.strftime("%d.%m.%Y")
        except ValueError:
            continue
    return text


def build_group_report(brigadier: str, summary: dict[str, object]) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –ø–æ –∏—Ç–æ–≥–∞–º —Å–º–µ–Ω—ã."""

    expenses = summary.get("expenses", {}) if isinstance(summary, dict) else {}
    materials = summary.get("materials", {}) if isinstance(summary, dict) else {}

    date_text = _format_date_for_summary(str(summary.get("date", "")))
    ship = str(summary.get("ship", "")).strip() or "‚Äî"

    total_amount = 0
    if isinstance(expenses, dict):
        for key in ("driver", "brigadier", "workers", "aux", "food", "taxi", "other"):
            try:
                total_amount += int(expenses.get(key, 0) or 0)
            except (TypeError, ValueError):
                continue
    total_text = f"{total_amount:,}".replace(",", " ")

    photos_link = "‚Äî"
    if isinstance(materials, dict):
        link_candidate = materials.get("photos_link")
        if isinstance(link_candidate, str) and link_candidate.strip():
            photos_link = link_candidate.strip()

    brigadier_line = brigadier.strip() if brigadier and brigadier.strip() else "‚Äî"

    lines = [
        "‚úÖ –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞",
        "",
        f"üë∑‚Äç‚ôÇÔ∏è –ë—Ä–∏–≥–∞–¥–∏—Ä: {brigadier_line}",
        f"üìÖ –î–∞—Ç–∞: {date_text}",
        f"üõ≥ –°—É–¥–Ω–æ: {ship}",
        f"üí∞ –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_text} ‚ÇΩ",
        f"üì∑ –§–æ—Ç–æ: {photos_link}",
        "",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!",
    ]
    return "\n".join(lines)


async def _load_shift_summary(service: SheetsService, row: int) -> dict[str, Any]:
    """–ß–∏—Ç–∞–µ—Ç —Å–≤–æ–¥–∫—É —Å–º–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã."""

    summary = await asyncio.to_thread(service.get_shift_summary, row)
    if not isinstance(summary, dict):
        raise RuntimeError("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å–º–µ–Ω—ã")
    return summary


def _menu_lines(session: ShiftSession) -> list[str]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –º–µ–Ω—é —Å–º–µ–Ω—ã —Å —Ç–µ–∫—É—â–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏."""

    lines = [
        "üóÇ –ú–µ–Ω—é –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã",
        f"–î–∞—Ç–∞: {_format_date_for_summary(session.date)}",
        "",
        _line("üßæ –†–∞—Å—Ö–æ–¥—ã", session.modes["expenses"]),
        _line("üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", session.modes["materials"]),
        _line("üë• –°–æ—Å—Ç–∞–≤ –±—Ä–∏–≥–∞–¥—ã", session.modes["crew"]),
        "",
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –ö–Ω–æ–ø–∫–∞ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É¬ª –ø–æ—è–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –±—É–¥—É—Ç –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–µ.",
    ]
    if session.closed:
        lines.append(
            "–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É –∑–∞–≤—Ç—Ä–∞."
        )
    return lines


async def render_shift_menu(
    message: types.Message,
    user_id: int,
    row: int | None,
    service: SheetsService | None = None,
    *,
    state: FSMContext | None = None,
    delete_trigger_message: bool = False,
    show_loading: bool = False,
    show_progress: bool = True,
    use_screen_message: bool = False,
) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å–º–µ–Ω—ã —Å —É—á—ë—Ç–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è."""

    sheets = _resolve_service(service)

    if delete_trigger_message:
        await safe_delete(message)

    loading_flash = None
    if show_loading:
        try:
            loading_flash = await flash_message(
                message, "–ó–∞–≥—Ä—É–∂–∞—é‚Ä¶", ttl=2.0
            )
        except Exception:  # noqa: BLE001
            logger.warning(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å flash –ø–µ—Ä–µ–¥ –º–µ–Ω—é —Å–º–µ–Ω—ã (user_id=%s)",
                user_id,
                exc_info=True,
            )

    loader = None
    if show_progress:
        try:
            loader = await flash_message(
                message, "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶", ttl=2.0
            )
        except Exception:  # noqa: BLE001
            logger.warning(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (user_id=%s)",
                user_id,
                exc_info=True,
            )

    target_row = row
    lock = None
    try:
        if target_row is None:
            lock = await acquire_user_lock(user_id)
            if lock is None:
                await message.answer(
                    "–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
                )
                return
            target_row = await asyncio.to_thread(sheets.open_shift_for_user, user_id)

        progress = await asyncio.to_thread(
            sheets.get_shift_progress, user_id, target_row
        )
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–º–µ–Ω—ã (user_id=%s, row=%s)", user_id, target_row
        )
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return
    finally:
        if lock is not None:
            release_user_lock(lock)
        await safe_delete(loader)
        await safe_delete(loading_flash)

    if target_row is None:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–º–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return

    try:
        shift_closed = await asyncio.to_thread(sheets.is_shift_closed, target_row)
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã (user_id=%s, row=%s)",
            user_id,
            target_row,
        )
        shift_closed = False

    try:
        raw_date = await asyncio.to_thread(sheets.get_shift_date, target_row)
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Å–º–µ–Ω—ã (user_id=%s, row=%s)", user_id, target_row
        )
        raw_date = date.today().isoformat()

    session = _sync_session(
        user_id,
        row=target_row,
        progress=progress,
        shift_date=raw_date or date.today().isoformat(),
        closed=shift_closed,
    )

    if state is not None:
        await state.set_state(ShiftState.ACTIVE)

    bot = message.bot
    chat_id = message.chat.id

    previous_menu_id = None
    if state is not None:
        data = await state.get_data()
        previous_menu_id = data.get("shift_menu_message_id")
        if previous_menu_id:
            try:
                await bot.delete_message(chat_id, previous_menu_id)
            except TelegramBadRequest:
                pass

    markup = shift_menu_keyboard(
        expenses_done=session.modes["expenses"],
        materials_done=session.modes["materials"],
        crew_done=session.modes["crew"],
        show_finish=all(session.modes.values()) and not session.closed,
    )

    lines = "\n".join(_menu_lines(session))
    if use_screen_message:
        menu_message = await send_screen_message(
            message,
            lines,
            reply_markup=markup,
        )
    else:
        menu_message = await message.answer(lines, reply_markup=markup)

    if state is not None:
        await state.update_data(
            shift_menu_message_id=menu_message.message_id,
            dashboard_message_id=None,
        )


async def _prepare_mode(
    message: types.Message,
    state: FSMContext,
    *,
    mode: Mode,
    module_path: str,
    func_name: str,
) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥—Ä–µ–∂–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã."""

    await flash_message(message, "–ó–∞–≥—Ä—É–∂–∞—é‚Ä¶", ttl=2.0)
    user_id = message.from_user.id
    await state.update_data(_shift_user_id=user_id)
    await state.set_state(mode)
    module = __import__(module_path, fromlist=[func_name])
    handler = getattr(module, func_name)
    await handler(message, state, user_id=user_id)


@router.message(ShiftState.ACTIVE, F.text.startswith("üßæ –†–∞—Å—Ö–æ–¥—ã"))
async def handle_expenses(message: types.Message, state: FSMContext) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª ¬´–†–∞—Å—Ö–æ–¥—ã¬ª –∏–∑ –º–µ–Ω—é —Å–º–µ–Ω—ã."""

    await _prepare_mode(
        message,
        state,
        mode=Mode.EXPENSES,
        module_path="features.expenses",
        func_name="start_expenses",
    )


@router.message(ShiftState.ACTIVE, F.text.startswith("üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"))
async def handle_materials(message: types.Message, state: FSMContext) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª ¬´–ú–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª –∏–∑ –º–µ–Ω—é —Å–º–µ–Ω—ã."""

    await _prepare_mode(
        message,
        state,
        mode=Mode.MATERIALS,
        module_path="features.materials",
        func_name="start_materials",
    )


@router.message(ShiftState.ACTIVE, F.text.startswith("üë• –°–æ—Å—Ç–∞–≤ –±—Ä–∏–≥–∞–¥—ã"))
async def handle_crew(message: types.Message, state: FSMContext) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª ¬´–°–æ—Å—Ç–∞–≤ –±—Ä–∏–≥–∞–¥—ã¬ª –∏–∑ –º–µ–Ω—é —Å–º–µ–Ω—ã."""

    await _prepare_mode(
        message,
        state,
        mode=Mode.CREW,
        module_path="features.crew",
        func_name="start_crew",
    )


async def _ensure_session(user_id: int) -> ShiftSession | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å."""

    session = _sessions.get(user_id)
    return session


@router.message(ShiftState.ACTIVE, F.text == SHIFT_BACK_BUTTON)
async def handle_back_to_dashboard(message: types.Message, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å."""

    from bot.handlers.dashboard import show_dashboard

    await flash_message(message, "–ó–∞–≥—Ä—É–∂–∞—é‚Ä¶", ttl=2.0)
    await show_dashboard(message, state=state)


@router.message(ShiftState.ACTIVE, F.text == FINISH_SHIFT_BUTTON)
async def handle_finish_shift(message: types.Message, state: FSMContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É."""

    session = await _ensure_session(message.from_user.id)
    if session is None:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–±–æ—á—É—é —Å—Ç—Ä–æ–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return

    await flash_message(message, "–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ‚Ä¶", ttl=2.0)
    await _close_shift(message, state, session)


async def _close_shift(
    message: types.Message,
    state: FSMContext,
    session: ShiftSession,
) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å."""

    user_id = message.from_user.id
    sheets = _resolve_service(None)

    row = session.row
    if not row:
        await message.answer(
            "–†–∞–±–æ—á–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å."
        )
        return

    try:
        already_closed = await asyncio.to_thread(sheets.is_shift_closed, row)
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã (user_id=%s, row=%s)",
            user_id,
            row,
        )
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    if already_closed:
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
        return

    try:
        progress = await asyncio.to_thread(sheets.get_shift_progress, user_id, row)
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–º–µ–Ω—ã –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º (user_id=%s, row=%s)",
            user_id,
            row,
        )
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    if not all(progress.values()):
        await message.answer(
            "–ù–µ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞–∑–¥–µ–ª—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    profile = None
    try:
        profile = await asyncio.to_thread(sheets.get_user_profile, user_id)
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º (user_id=%s)",
            user_id,
        )

    try:
        summary = await _load_shift_summary(sheets, row)
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ–¥–∫—É —Å–º–µ–Ω—ã (user_id=%s, row=%s)", user_id, row
        )
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    try:
        closed_now = await asyncio.to_thread(sheets.finalize_shift, user_id, row)
    except Exception:  # noqa: BLE001
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã (user_id=%s, row=%s)", user_id, row)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return

    if not closed_now:
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
        return

    notifications_enabled = group_notifications_enabled()
    group_sent = False
    if notifications_enabled:
        crew_info = summary.get("crew") if isinstance(summary, dict) else None
        brigadier_name = ""
        if isinstance(crew_info, dict):
            name_candidate = crew_info.get("brigadier")
            if isinstance(name_candidate, str) and name_candidate.strip():
                brigadier_name = name_candidate.strip()
        if not brigadier_name and profile is not None:
            brigadier_name = profile.fio or profile.fio_compact
        if not brigadier_name:
            brigadier_name = (
                message.from_user.full_name
                or message.from_user.username
                or str(user_id)
            )
        report_text = build_group_report(brigadier_name, summary)
        try:
            await message.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=report_text,
                disable_web_page_preview=True,
            )
            group_sent = True
        except Exception:  # noqa: BLE001
            logger.exception(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç %s", GROUP_CHAT_ID
            )

    confirmation = (
        "–°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞. –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç."
        if group_sent
        else "–°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞."
    )
    await message.answer(confirmation + "\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å‚Ä¶")

    mark_shift_closed(user_id)
    if state is not None:
        await state.set_state(ShiftState.IDLE)

    from bot.handlers.dashboard import show_dashboard

    await show_dashboard(message, service=sheets, state=state)
