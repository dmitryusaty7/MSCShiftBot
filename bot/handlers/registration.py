"""–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

from __future__ import annotations

import asyncio
from typing import Any

from aiogram import Bot, F, Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.keyboards.auth import (
    CANCEL_BUTTON,
    CONFIRM_BUTTON,
    RETRY_BUTTON,
    SKIP_BUTTON,
    START_BUTTON,
    confirm_retry_kb,
    skip_button_kb,
    start_registration_kb,
)
from bot.utils.flash import flash_message
from bot.validators.name import validate_name
from bot.handlers.dashboard import show_dashboard

# –°–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
show_menu = show_dashboard
from services.env import require_env
from services.sheets import SheetsService

router = Router(name="registration")

_SERVICE: SheetsService | None = None


class RegistrationState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —à–∞–≥–∞–º UX."""

    start = State()
    last_name = State()
    first_name = State()
    patronymic = State()
    confirm = State()


async def _safe_delete_message(bot: Bot, chat_id: int, message_id: int | None) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏ Telegram."""

    if not message_id:
        return
    try:
        await bot.delete_message(chat_id, message_id)
    except TelegramBadRequest:
        pass


async def _clear_data_message(
    state: FSMContext, key: str, *, bot: types.Bot, chat_id: int
) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É (prompt/error/confirm)."""

    data = await state.get_data()
    message_id = data.get(key)
    if message_id:
        await _safe_delete_message(bot, chat_id, message_id)
    await state.update_data(**{key: None})


async def _clear_duplicate_alert(state: FSMContext, *, bot: Bot, chat_id: int) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ –§–ò–û, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å."""

    await _clear_data_message(state, "duplicate_id", bot=bot, chat_id=chat_id)


def _get_service() -> SheetsService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏."""

    global _SERVICE
    if _SERVICE is None:
        _SERVICE = SheetsService()
    return _SERVICE


def _get_spreadsheet_id() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""

    return require_env("SPREADSHEET_ID")


async def _register_user_input(state: FSMContext, message_id: int) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏."""

    data = await state.get_data()
    ids: list[int] = list(data.get("input_ids", []))
    ids.append(message_id)
    await state.update_data(input_ids=ids)


async def _clear_user_inputs(
    state: FSMContext, *, bot: types.Bot, chat_id: int
) -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞."""

    data = await state.get_data()
    ids: list[int] = list(data.get("input_ids", []))
    if not ids:
        return
    for message_id in ids:
        await _safe_delete_message(bot, chat_id, message_id)
    await state.update_data(input_ids=[])


async def _store_prompt(
    source_message: types.Message, state: FSMContext, text: str, *, reply_markup: Any | None = None
) -> types.Message:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏."""

    prompt = await source_message.answer(text, reply_markup=reply_markup)
    await state.update_data(prompt_id=prompt.message_id, input_ids=[])
    return prompt


async def _handle_text_step(
    message: types.Message,
    state: FSMContext,
    *,
    validator_message: str,
    error_text: str,
    next_state: State,
    data_key: str,
    reply_markup: Any | None = None,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–≥ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –≤–≤–æ–¥–æ–º."""

    bot = message.bot
    chat_id = message.chat.id
    await _register_user_input(state, message.message_id)
    try:
        value = validate_name(message.text or "")
    except ValueError as exc:
        await _clear_data_message(state, "error_id", bot=bot, chat_id=chat_id)
        error_message = await message.answer(f"{error_text}: {exc}")
        await state.update_data(error_id=error_message.message_id)
        return

    await state.update_data(**{data_key: value})
    await _clear_user_inputs(state, bot=bot, chat_id=chat_id)
    await _clear_data_message(state, "prompt_id", bot=bot, chat_id=chat_id)
    await _clear_data_message(state, "error_id", bot=bot, chat_id=chat_id)
    await _clear_duplicate_alert(state, bot=bot, chat_id=chat_id)
    await state.set_state(next_state)
    await _store_prompt(message, state, validator_message, reply_markup=reply_markup)


async def _show_confirmation(message: types.Message, state: FSMContext) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è REG-11."""

    data = await state.get_data()
    bot = message.bot
    chat_id = message.chat.id
    await _clear_data_message(state, "prompt_id", bot=bot, chat_id=chat_id)
    await _clear_data_message(state, "error_id", bot=bot, chat_id=chat_id)
    await _clear_data_message(state, "confirm_id", bot=bot, chat_id=chat_id)
    await _clear_duplicate_alert(state, bot=bot, chat_id=chat_id)
    await _clear_user_inputs(state, bot=bot, chat_id=chat_id)

    fio = " ".join(
        part
        for part in (
            data.get("last_name", ""),
            data.get("first_name", ""),
            data.get("patronymic", ""),
        )
        if part
    )
    confirm_message = await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n<b>{fio}</b>\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª –∏–ª–∏ ¬´–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ¬ª.",
        reply_markup=confirm_retry_kb(),
        parse_mode="HTML",
    )
    await state.update_data(confirm_id=confirm_message.message_id)
    await state.set_state(RegistrationState.confirm)


@router.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext) -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ –∑–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""

    await flash_message(message, "üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø‚Ä¶", ttl=1.5)

    user_id = message.from_user.id
    service = _get_service()
    spreadsheet_id = _get_spreadsheet_id()

    try:
        row, status = await asyncio.to_thread(
            service.find_row_by_telegram_id, spreadsheet_id, user_id
        )
    except PermissionError:
        await message.answer("–í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
        return
    except Exception:  # noqa: BLE001
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
        return

    status_normalized = (status or "").strip().casefold() if status else ""

    if status_normalized == "–∞—Ä—Ö–∏–≤":
        await message.answer("–í–∞—à –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª—é—á—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É (—Å—Ç–∞—Ç—É—Å: –ê—Ä—Ö–∏–≤).")
        return

    if status_normalized == "ban":
        await message.answer("–í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
        return

    profile = None
    if row and status_normalized not in {"–∞—Ä—Ö–∏–≤", "ban"}:
        try:
            profile = await asyncio.to_thread(
                service.get_user_profile,
                user_id,
                spreadsheet_id,
                required=False,
            )
        except RuntimeError:
            profile = None
        except Exception:  # noqa: BLE001
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
            )
            return

    if profile:
        reg03 = await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û—Ç–∫—Ä—ã–≤–∞—é –ø–∞–Ω–µ–ª—å."
        )
        await show_menu(message, service=service, state=state)
        await _safe_delete_message(message.bot, message.chat.id, reg03.message_id)
        return

    await _clear_duplicate_alert(state, bot=message.bot, chat_id=message.chat.id)
    await state.clear()
    await state.set_state(RegistrationState.start)
    await _store_prompt(
        message,
        state,
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=start_registration_kb(),
    )


@router.message(RegistrationState.start, F.text == START_BUTTON)
async def start_registration(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è reply-–∫–Ω–æ–ø–∫–∏."""

    await _register_user_input(state, message.message_id)
    bot = message.bot
    chat_id = message.chat.id
    await _clear_user_inputs(state, bot=bot, chat_id=chat_id)
    await _clear_data_message(state, "prompt_id", bot=bot, chat_id=chat_id)
    await _clear_duplicate_alert(state, bot=bot, chat_id=chat_id)
    await state.set_state(RegistrationState.last_name)
    await state.update_data(
        last_name="",
        first_name="",
        patronymic="",
        prompt_id=None,
        error_id=None,
        duplicate_id=None,
    )
    await _store_prompt(
        message,
        state,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –§–∞–º–∏–ª–∏—é (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã).",
        reply_markup=types.ReplyKeyboardRemove(),
    )


@router.message(RegistrationState.start, F.text == CANCEL_BUTTON)
@router.message(RegistrationState.last_name, F.text == CANCEL_BUTTON)
@router.message(RegistrationState.first_name, F.text == CANCEL_BUTTON)
@router.message(RegistrationState.patronymic, F.text == CANCEL_BUTTON)
@router.message(RegistrationState.confirm, F.text == CANCEL_BUTTON)
async def cancel_registration(message: types.Message, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –æ—á–∏—â–∞–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""

    bot = message.bot
    chat_id = message.chat.id
    await _register_user_input(state, message.message_id)
    await _clear_user_inputs(state, bot=bot, chat_id=chat_id)
    await _clear_data_message(state, "prompt_id", bot=bot, chat_id=chat_id)
    await _clear_data_message(state, "error_id", bot=bot, chat_id=chat_id)
    await _clear_data_message(state, "confirm_id", bot=bot, chat_id=chat_id)
    await _clear_duplicate_alert(state, bot=bot, chat_id=chat_id)
    await state.clear()
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.",
        reply_markup=types.ReplyKeyboardRemove(),
    )


@router.message(RegistrationState.last_name)
async def process_last_name(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏ (REG-05/06)."""

    await _handle_text_step(
        message,
        state,
        validator_message="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã).",
        error_text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è",
        next_state=RegistrationState.first_name,
        data_key="last_name",
        reply_markup=types.ReplyKeyboardRemove(),
    )


@router.message(RegistrationState.first_name)
async def process_first_name(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ (REG-07/08)."""

    await _handle_text_step(
        message,
        state,
        validator_message="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –û—Ç—á–µ—Å—Ç–≤–æ (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª).",
        error_text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è",
        next_state=RegistrationState.patronymic,
        data_key="first_name",
        reply_markup=skip_button_kb(),
    )


@router.message(RegistrationState.patronymic)
async def process_patronymic(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç—á–µ—Å—Ç–≤–∞ (REG-09/10)."""

    bot = message.bot
    chat_id = message.chat.id
    text = (message.text or "").strip()
    await _register_user_input(state, message.message_id)
    if text.casefold() == SKIP_BUTTON.casefold():
        await state.update_data(patronymic="")
        await _clear_user_inputs(state, bot=bot, chat_id=chat_id)
        await _show_confirmation(message, state)
        return
    try:
        value = validate_name(text)
    except ValueError as exc:
        await _clear_data_message(state, "error_id", bot=bot, chat_id=chat_id)
        error_message = await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ: {exc}")
        await state.update_data(error_id=error_message.message_id)
        return

    await state.update_data(patronymic=value)
    await _clear_user_inputs(state, bot=bot, chat_id=chat_id)
    await _clear_duplicate_alert(state, bot=bot, chat_id=chat_id)
    await _show_confirmation(message, state)


@router.message(RegistrationState.confirm, F.text == RETRY_BUTTON)
async def retry_registration(message: types.Message, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∞—á–∞–ª—É –≤–≤–æ–¥–∞ –§–ò–û."""

    bot = message.bot
    chat_id = message.chat.id
    await _register_user_input(state, message.message_id)
    await _clear_user_inputs(state, bot=bot, chat_id=chat_id)
    await _clear_data_message(state, "confirm_id", bot=bot, chat_id=chat_id)
    await _clear_duplicate_alert(state, bot=bot, chat_id=chat_id)
    await state.set_state(RegistrationState.last_name)
    await state.update_data(
        prompt_id=None,
        error_id=None,
        last_name="",
        first_name="",
        patronymic="",
        input_ids=[],
    )
    await _store_prompt(
        message,
        state,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –§–∞–º–∏–ª–∏—é (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã).",
        reply_markup=types.ReplyKeyboardRemove(),
    )


@router.message(RegistrationState.confirm, F.text == CONFIRM_BUTTON)
async def confirm_registration(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ."""

    bot = message.bot
    chat_id = message.chat.id
    await _register_user_input(state, message.message_id)
    await _clear_user_inputs(state, bot=bot, chat_id=chat_id)
    await _clear_data_message(state, "confirm_id", bot=bot, chat_id=chat_id)

    data = await state.get_data()
    last_name = data.get("last_name", "")
    first_name = data.get("first_name", "")
    patronymic = data.get("patronymic", "")

    if not last_name or not first_name:
        await message.answer(
            "–î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        await state.clear()
        return

    service = _get_service()
    spreadsheet_id = _get_spreadsheet_id()

    duplicate_exists = await asyncio.to_thread(
        service.fio_duplicate_exists, spreadsheet_id, last_name, first_name, patronymic
    )
    if duplicate_exists:
        await _clear_duplicate_alert(state, bot=bot, chat_id=chat_id)
        duplicate_message = await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –§–ò–û —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        await state.update_data(duplicate_id=duplicate_message.message_id)
        return

    user_id = message.from_user.id
    try:
        await asyncio.to_thread(
            service.upsert_registration_row,
            spreadsheet_id,
            user_id,
            last_name,
            first_name,
            patronymic,
        )
    except PermissionError:
        await message.answer("–í–∞—à –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª—é—á—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É.")
        return
    except Exception:  # noqa: BLE001
        await message.answer("–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await _clear_duplicate_alert(state, bot=bot, chat_id=chat_id)
    await state.clear()
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω. –û—Ç–∫—Ä—ã–≤–∞—é –ø–∞–Ω–µ–ª—å.",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await flash_message(message, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", ttl=2.0)

    try:
        await asyncio.to_thread(service.get_user_profile, user_id)
    except Exception:  # noqa: BLE001
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–µ —É–¥–∞–ª–æ—Å—å. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ."
        )
        return

    await show_menu(message, service=service, state=state)
