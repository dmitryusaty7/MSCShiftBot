"""–ü—Ä—è–º–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã –∏–∑ –º–µ–Ω—é —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º."""

from __future__ import annotations

import asyncio
import logging
from dataclasses import dataclass
from datetime import datetime, timedelta
from html import escape
from typing import Any

from aiogram import F, Router, types
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.handlers.shift_menu import (
    ShiftState,
    get_shift_session,
    mark_shift_closed,
    render_shift_menu,
)
from bot.keyboards.dashboard import FINISH_SHIFT_BUTTON
from bot.keyboards.shift_close import (
    CANCEL_CLOSE_BUTTON,
    CONFIRM_CLOSE_BUTTON,
    close_confirmation_keyboard,
)
from bot.utils.cleanup import cleanup_after_confirm, cleanup_screen, send_screen_message
from bot.utils.flash import flash_message
from services.env import get_group_chat_id
from services.sheets import SheetsService

logger = logging.getLogger(__name__)

router = Router(name="shift-close")

_service: SheetsService | None = None
_NOTIFY_CACHE_TTL = timedelta(minutes=10)
_last_notified: dict[int, datetime] = {}


class ShiftCloseState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã."""

    CONFIRM = State()


@dataclass
class GroupNotificationContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""

    date: str
    user: str
    vessel: str
    statuses: str
    expenses_total: str
    materials_summary: str
    crew_summary: str


def _get_service() -> SheetsService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Ç–∞–±–ª–∏—Ü."""

    global _service
    if _service is None:
        _service = SheetsService()
    return _service


def _format_money(value: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Ç—ã—Å—è—á –∏ –∑–Ω–∞—á–∫–æ–º —Ä—É–±–ª—è."""

    formatted = f"{value:,}".replace(",", " ")
    return f"{formatted} ‚ÇΩ"


def _format_materials(summary: dict[str, Any] | None) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""

    if not isinstance(summary, dict):
        return "‚Äî"

    pvd = summary.get("pvd_rolls_m")
    pvc = summary.get("pvc_tubes")
    tape = summary.get("tape")
    photos = summary.get("photos_link")

    parts: list[str] = []
    if isinstance(pvd, int) and pvd > 0:
        parts.append(f"–ü–í–î {pvd} –º")
    if isinstance(pvc, int) and pvc > 0:
        parts.append(f"–ü–í–• {pvc} —à—Ç")
    if isinstance(tape, int) and tape > 0:
        parts.append(f"–°–∫–æ—Ç—á {tape} —à—Ç")
    if isinstance(photos, str) and photos.strip():
        parts.append("–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

    return "; ".join(parts) if parts else "‚Äî"


def _format_crew(summary: dict[str, Any] | None) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—Ä–∏–≥–∞–¥—ã."""

    if not isinstance(summary, dict):
        return "‚Äî"

    crew_members: list[str] = []
    driver = summary.get("driver")
    if isinstance(driver, str) and driver.strip():
        crew_members.append(driver.strip())
    workers = summary.get("workers")
    if isinstance(workers, list):
        crew_members.extend(member.strip() for member in workers if isinstance(member, str) and member.strip())

    return ", ".join(crew_members) if crew_members else "‚Äî"


def _parse_int(value: Any) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫ —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É."""

    if isinstance(value, bool):  # pragma: no cover - –∑–∞—â–∏—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        return int(value)
    if isinstance(value, (int, float)):
        try:
            return int(value)
        except (TypeError, ValueError):  # pragma: no cover - –∑–∞—â–∏—Ç–Ω–æ–µ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ
            return 0
    if isinstance(value, str):
        stripped = value.strip().replace("\u202f", "").replace(" ", "")
        if not stripped:
            return 0
        try:
            return int(float(stripped)) if "." in stripped else int(stripped)
        except ValueError:
            digits = "".join(ch for ch in stripped if ch.isdigit() or ch == "-")
            return int(digits) if digits else 0
    return 0


def _compose_notification_context(
    user_name: str,
    summary: dict[str, Any],
) -> GroupNotificationContext:
    """–°—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞."""

    expenses = summary.get("expenses", {}) if isinstance(summary, dict) else {}
    materials = summary.get("materials") if isinstance(summary, dict) else None
    crew = summary.get("crew") if isinstance(summary, dict) else None

    total = 0
    if isinstance(expenses, dict):
        provided_total = _parse_int(expenses.get("total"))
        calculated = sum(
            _parse_int(expenses.get(key))
            for key in ("driver", "brigadier", "workers", "aux", "food", "taxi", "other")
        )
        total = provided_total or calculated

    date_value = str(summary.get("date", "")).strip() or "‚Äî"
    vessel_value = str(summary.get("ship", "")).strip() or "‚Äî"

    statuses_line = "üìä –°—Ç–∞—Ç—É—Å—ã: ‚úÖ –†–∞—Å—Ö–æ–¥—ã ‚Ä¢ ‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Ä¢ ‚úÖ –ë—Ä–∏–≥–∞–¥–∞"

    return GroupNotificationContext(
        date=date_value,
        user=user_name,
        vessel=vessel_value,
        statuses=statuses_line,
        expenses_total=_format_money(total),
        materials_summary=_format_materials(materials),
        crew_summary=_format_crew(crew),
    )


def _format_group_report(ctx: GroupNotificationContext) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞."""

    return (
        "<b>‚úÖ –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞</b>\n"
        f"üìÖ {escape(ctx.date)}\n"
        f"üßë‚Äç‚úàÔ∏è {escape(ctx.user)}\n"
        f"üõ• {escape(ctx.vessel)}\n"
        f"{escape(ctx.statuses)}\n\n"
        f"üßæ –†–∞—Å—Ö–æ–¥—ã: {escape(ctx.expenses_total)}\n"
        f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {escape(ctx.materials_summary)}\n"
        f"üë• –ë—Ä–∏–≥–∞–¥–∞: {escape(ctx.crew_summary)}"
    )


def _prune_cache(now: datetime) -> None:
    """–£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö."""

    stale = [row for row, timestamp in _last_notified.items() if now - timestamp >= _NOTIFY_CACHE_TTL]
    for row in stale:
        _last_notified.pop(row, None)


def _should_skip_notification(row: int, now: datetime) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–µ –Ω–µ–¥–∞–≤–Ω–æ."""

    _prune_cache(now)
    last = _last_notified.get(row)
    return bool(last and now - last < _NOTIFY_CACHE_TTL)


def _mark_notified(row: int, now: datetime) -> None:
    """–ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å–º–µ–Ω—ã."""

    _last_notified[row] = now


async def _notify_group(bot: types.Bot, ctx: GroupNotificationContext, *, row: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞."""

    now = datetime.now()
    if _should_skip_notification(row, now):
        logger.info("–ü—Ä–æ–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–æ–∫–∏ %s: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ", row)
        return

    try:
        chat_id = get_group_chat_id()
    except RuntimeError as exc:  # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        logger.warning("GROUP_CHAT_ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: %s", exc)
        _mark_notified(row, now)
        return

    if not chat_id:
        logger.warning("GROUP_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        _mark_notified(row, now)
        return

    text = _format_group_report(ctx)
    try:
        await bot.send_message(chat_id, text, parse_mode="HTML", disable_web_page_preview=True)
        logger.info("–ì—Ä—É–ø–ø–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: chat=%s, length=%s", chat_id, len(text))
    except (TelegramForbiddenError, TelegramBadRequest) as exc:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç %s: %s", chat_id, exc)
    except Exception as exc:  # noqa: BLE001
        logger.exception("–°–±–æ–π –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç %s: %s", chat_id, exc)
    finally:
        _mark_notified(row, now)


async def _return_to_menu(
    message: types.Message,
    state: FSMContext,
    *,
    user_id: int,
    row: int | None,
    service: SheetsService,
    flash_text: str | None = None,
    flash_ttl: float = 3.0,
) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Å–º–µ–Ω—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã."""

    await cleanup_screen(message.bot, message.chat.id, keep_start=True)
    if flash_text:
        await flash_message(message, flash_text, ttl=flash_ttl)
    await render_shift_menu(
        message,
        user_id,
        row,
        service=service,
        state=state,
        delete_trigger_message=False,
        show_progress=False,
        use_screen_message=True,
    )


@router.message(ShiftState.ACTIVE, F.text == FINISH_SHIFT_BUTTON)
async def handle_shift_close_request(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –∏–∑ –º–µ–Ω—é."""

    user_id = message.from_user.id
    session = get_shift_session(user_id)
    if session is None or not getattr(session, "row", None):
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return

    service = _get_service()
    row = session.row

    try:
        await flash_message(message, "üíæ –ü—Ä–æ–≤–µ—Ä—è—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–æ–≤‚Ä¶", ttl=1.5)
    except Exception:  # noqa: BLE001
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å flash –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è", exc_info=True)

    try:
        closed = await asyncio.to_thread(service.is_shift_closed, row)
    except Exception:  # noqa: BLE001
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (user_id=%s, row=%s)", user_id, row)
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."  # noqa: G004
        )
        return

    if closed:
        mark_shift_closed(user_id)
        await message.answer("–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—É—é —Å–º–µ–Ω—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å –∑–∞–≤—Ç—Ä–∞.")
        return

    try:
        progress = await asyncio.to_thread(service.get_shift_progress, user_id, row)
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–º–µ–Ω—ã (user_id=%s, row=%s)", user_id, row)
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–¥–µ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."  # noqa: G004
        )
        return

    if not all(progress.values()):
        await flash_message(
            message,
            "‚ö†Ô∏è –ù–µ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –†–∞—Å—Ö–æ–¥—ã, –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –°–æ—Å—Ç–∞–≤.",
            ttl=3.0,
        )
        await render_shift_menu(
            message,
            user_id,
            row,
            service=service,
            state=state,
            delete_trigger_message=False,
            show_progress=False,
            use_screen_message=True,
        )
        return

    await state.update_data(shift_close_row=row)
    await state.set_state(ShiftCloseState.CONFIRM)

    await cleanup_screen(message.bot, message.chat.id, keep_start=True)
    await send_screen_message(
        message,
        "‚úÖ –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.\n\n–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ?",
        reply_markup=close_confirmation_keyboard(),
    )


async def _resolve_brigadier_name(
    user_id: int,
    summary: dict[str, Any] | None,
    *,
    service: SheetsService,
    message: types.Message,
) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –§–ò–û –±—Ä–∏–≥–∞–¥–∏—Ä–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞."""

    brigadier = ""
    if isinstance(summary, dict):
        crew = summary.get("crew")
        if isinstance(crew, dict):
            candidate = crew.get("brigadier")
            if isinstance(candidate, str) and candidate.strip():
                brigadier = candidate.strip()
    if brigadier:
        return brigadier

    profile = None
    try:
        profile = await asyncio.to_thread(service.get_user_profile, user_id)
    except Exception:  # noqa: BLE001
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id, exc_info=True)

    if profile and getattr(profile, "fio", ""):
        return profile.fio
    if profile and getattr(profile, "fio_compact", ""):
        return profile.fio_compact

    full_name = message.from_user.full_name if message.from_user else ""
    if full_name:
        return full_name
    username = message.from_user.username if message.from_user else ""
    if username:
        return f"@{username}" if not username.startswith("@") else username
    return str(user_id)


@router.message(ShiftCloseState.CONFIRM, F.text == CONFIRM_CLOSE_BUTTON)
async def handle_shift_close_confirm(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    user_id = message.from_user.id
    data = await state.get_data()
    row = data.get("shift_close_row") if isinstance(data, dict) else None
    if not isinstance(row, int) or row <= 0:
        await state.set_state(ShiftState.ACTIVE)
        await render_shift_menu(
            message,
            user_id,
            None,
            service=_get_service(),
            state=state,
            delete_trigger_message=False,
            show_progress=True,
            use_screen_message=True,
        )
        return

    service = _get_service()

    try:
        await flash_message(message, "üíæ –°–æ—Ö—Ä–∞–Ω—è—é‚Ä¶", ttl=1.5)
    except Exception:  # noqa: BLE001
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å flash –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", exc_info=True)

    summary: dict[str, Any] | None = None
    try:
        summary = await asyncio.to_thread(service.get_shift_summary, row)
        if not isinstance(summary, dict):
            raise RuntimeError("summary must be dict")
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å–º–µ–Ω—ã (user_id=%s, row=%s)", user_id, row)
        await state.set_state(ShiftState.ACTIVE)
        await state.update_data(shift_close_row=None)
        await _return_to_menu(
            message,
            state,
            user_id=user_id,
            row=row,
            service=service,
            flash_text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        )
        return

    try:
        closed_now = await asyncio.to_thread(service.finalize_shift, user_id, row)
    except Exception:  # noqa: BLE001
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã (user_id=%s, row=%s)", user_id, row)
        await state.set_state(ShiftState.ACTIVE)
        await state.update_data(shift_close_row=None)
        await _return_to_menu(
            message,
            state,
            user_id=user_id,
            row=row,
            service=service,
            flash_text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        )
        return

    if not closed_now:
        logger.info("–°–º–µ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ —Ä–∞–Ω–µ–µ (user_id=%s, row=%s)", user_id, row)

    now = datetime.now()
    brigadier_name = await _resolve_brigadier_name(
        user_id,
        summary,
        service=service,
        message=message,
    )
    context = _compose_notification_context(brigadier_name, summary)
    await _notify_group(message.bot, context, row=row)

    mark_shift_closed(user_id)
    await state.set_state(ShiftState.IDLE)
    await state.update_data(shift_close_row=None)

    await cleanup_after_confirm(message, state, keep_start=False)

    try:
        await flash_message(message, "‚úÖ –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞.", ttl=1.5)
    except Exception:  # noqa: BLE001
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è", exc_info=True)

    from bot.handlers.dashboard import show_dashboard

    await show_dashboard(message, state=state, service=service)


@router.message(ShiftCloseState.CONFIRM, F.text == CANCEL_CLOSE_BUTTON)
async def handle_shift_close_cancel(message: types.Message, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é."""

    user_id = message.from_user.id
    data = await state.get_data()
    row = data.get("shift_close_row") if isinstance(data, dict) else None
    service = _get_service()

    await state.set_state(ShiftState.ACTIVE)
    await state.update_data(shift_close_row=None)

    await cleanup_screen(message.bot, message.chat.id, keep_start=True)
    await flash_message(message, "‚Ü© –ó–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", ttl=1.2)
    await render_shift_menu(
        message,
        user_id,
        row,
        service=service,
        state=state,
        delete_trigger_message=False,
        show_progress=False,
        use_screen_message=True,
    )
