"""–°—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–∑–¥–µ–ª–∞ ¬´–†–∞—Å—Ö–æ–¥—ã —Å–º–µ–Ω—ã¬ª —Å –æ—á–∏—Å—Ç–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""

from __future__ import annotations

import asyncio
import logging
import re
from typing import Any, Dict, List

from aiogram import F, Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.keyboards.expenses import (
    CONFIRM_BUTTON,
    EDIT_BUTTON,
    MENU_BUTTON,
    SKIP_BUTTON,
    START_EXPENSES_BUTTON,
    expenses_amount_keyboard,
    expenses_confirm_keyboard,
    expenses_holds_keyboard,
    expenses_remove_keyboard,
    expenses_ship_keyboard,
    expenses_start_keyboard,
)
from bot.utils.flash import flash_message
from bot.validators.number import parse_amount
from features.utils.messaging import safe_delete
from services.sheets import SheetsService

router = Router(name="expenses")

logger = logging.getLogger(__name__)
_service: SheetsService | None = None

SHIP_PATTERN = re.compile(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë0-9][A-Za-z–ê-–Ø–∞-—è–Å—ë0-9\- ]{1,49}$")


class ExpensesState(StatesGroup):
    """–≠—Ç–∞–ø—ã —Å—Ü–µ–Ω–∞—Ä–∏—è ¬´–†–∞—Å—Ö–æ–¥—ã —Å–º–µ–Ω—ã¬ª"""

    INTRO = State()
    SHIP = State()
    HOLDS = State()
    DRIVER = State()
    BRIGADIER = State()
    WORKERS = State()
    AUX = State()
    FOOD = State()
    TAXI = State()
    OTHER = State()
    CONFIRM = State()


async def _delete_messages(bot: types.Bot, chat_id: int, message_ids: list[int]) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç –Ω–∞–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π."""

    for message_id in message_ids:
        try:
            await bot.delete_message(chat_id, message_id)
        except TelegramBadRequest:
            continue
        except Exception:  # noqa: BLE001
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ %s", message_id)


def _get_service() -> SheetsService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç) –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä SheetsService."""

    global _service
    if _service is None:
        _service = SheetsService()
    return _service


def _make_tracker() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–≥–æ—Ç–æ–≤–∫—É —Ç—Ä–µ–∫–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""

    return {"prompt_id": None, "user_messages": [], "bot_messages": []}


async def _get_context(state: FSMContext) -> Dict[str, Any]:
    """–ß–∏—Ç–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ FSM."""

    data = await state.get_data()
    context = data.get("expenses_ctx")
    if not isinstance(context, dict):
        context = {}
    context.setdefault("data", {})
    tracker = context.get("tracker")
    if not isinstance(tracker, dict):
        tracker = _make_tracker()
    else:
        tracker.setdefault("prompt_id", None)
        tracker.setdefault("user_messages", [])
        tracker.setdefault("bot_messages", [])
    context["tracker"] = tracker
    return context


async def _save_context(state: FSMContext, context: Dict[str, Any]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ FSM."""

    await state.update_data(expenses_ctx=context)


def _normalize_ship_name(value: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞ –∫ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–º—É –≤–∏–¥—É."""

    cleaned = re.sub(r"\s+", " ", value.strip())
    if not cleaned:
        return cleaned
    return cleaned[0].upper() + cleaned[1:]


async def _set_prompt(
    message: types.Message,
    state: FSMContext,
    *,
    prompt: types.Message,
) -> None:
    """–§–∏–∫—Å–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —à–∞–≥–∞."""

    context = await _get_context(state)
    tracker = _make_tracker()
    tracker["prompt_id"] = prompt.message_id
    context["tracker"] = tracker
    await _save_context(state, context)


async def _add_user_message(state: FSMContext, message_id: int) -> None:
    """–ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è."""

    context = await _get_context(state)
    tracker = context.get("tracker", _make_tracker())
    tracker.setdefault("user_messages", []).append(message_id)
    context["tracker"] = tracker
    await _save_context(state, context)


async def _add_bot_message(state: FSMContext, message_id: int) -> None:
    """–ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏."""

    context = await _get_context(state)
    tracker = context.get("tracker", _make_tracker())
    tracker.setdefault("bot_messages", []).append(message_id)
    context["tracker"] = tracker
    await _save_context(state, context)


async def _cleanup_step(message: types.Message, state: FSMContext) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç—Ä–µ–∫–µ—Ä."""

    context = await _get_context(state)
    tracker = context.get("tracker", _make_tracker())
    bot = message.bot
    chat_id = message.chat.id
    ids: List[int] = []
    prompt_id = tracker.get("prompt_id")
    if prompt_id:
        ids.append(prompt_id)
    ids.extend(tracker.get("bot_messages", []))
    await _delete_messages(bot, chat_id, ids)
    await _delete_messages(bot, chat_id, tracker.get("user_messages", []))
    context["tracker"] = _make_tracker()
    await _save_context(state, context)


async def _return_to_menu(message: types.Message, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Å–º–µ–Ω—ã –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""

    context = await _get_context(state)
    user_id = context.get("user_id")
    row = context.get("row")
    await _cleanup_step(message, state)
    if not isinstance(user_id, int) or not isinstance(row, int):
        return
    await state.update_data(expenses_ctx=None)
    from bot.handlers.shift_menu import render_shift_menu  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∞

    await render_shift_menu(
        message,
        user_id,
        row,
        state=state,
        service=_get_service(),
        delete_trigger_message=False,
        show_progress=False,
    )


async def start_expenses(
    message: types.Message,
    state: FSMContext,
    *,
    user_id: int | None = None,
) -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª ¬´–†–∞—Å—Ö–æ–¥—ã —Å–º–µ–Ω—ã¬ª –∏–∑ –º–µ–Ω—é —Å–º–µ–Ω—ã."""

    await safe_delete(message)
    actual_user_id = user_id or (message.from_user.id if message.from_user else None)
    if actual_user_id is None:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        await state.update_data(expenses_ctx=None)
        return

    service = _get_service()
    row = await asyncio.to_thread(service.get_shift_row_index_for_user, actual_user_id)
    if row is None:
        row = await asyncio.to_thread(service.open_shift_for_user, actual_user_id)

    intro_lines = [
        "üßæ –†–∞–∑–¥–µ–ª ¬´–†–∞—Å—Ö–æ–¥—ã —Å–º–µ–Ω—ã¬ª",
        "–ó–¥–µ—Å—å —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥.",
    ]
    prompt = await message.answer("\n".join(intro_lines), reply_markup=expenses_start_keyboard())

    tracker = _make_tracker()
    tracker["prompt_id"] = prompt.message_id
    context = {
        "user_id": actual_user_id,
        "row": row,
        "data": {},
        "ships": [],
        "tracker": tracker,
    }
    await _save_context(state, context)
    await state.set_state(ExpensesState.INTRO)


async def _ask_ship(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏."""

    context = await _get_context(state)
    service = _get_service()
    ships = await asyncio.to_thread(service.get_active_ships)
    context["ships"] = ships
    await _save_context(state, context)

    if ships:
        text = (
            "–≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–¥–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è.\n"
            "–µ—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ —Å—É–¥–Ω–∞ –Ω–µ—Ç, –±–æ—Ç –¥–æ–±–∞–≤–∏—Ç –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü—É."
        )
        keyboard = expenses_ship_keyboard(ships[:8])
    else:
        text = (
            "–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞. –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ."
        )
        keyboard = expenses_ship_keyboard([])

    prompt = await message.answer(text, reply_markup=keyboard)
    await _set_prompt(message, state, prompt=prompt)
    await state.set_state(ExpensesState.SHIP)


async def _ask_holds(message: types.Message, state: FSMContext) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —à–∞–≥—É –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞ —Ç—Ä—é–º–æ–≤."""

    prompt = await message.answer(
        "—Å–∫–æ–ª—å–∫–æ —Ç—Ä—é–º–æ–≤ –Ω–∞ —Å—É–¥–Ω–µ?\n–≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7 –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.",
        reply_markup=expenses_holds_keyboard(),
    )
    await _set_prompt(message, state, prompt=prompt)
    await state.set_state(ExpensesState.HOLDS)


async def _ask_amount(
    message: types.Message,
    state: FSMContext,
    *,
    step: ExpensesState,
    question: str,
) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —à–∞–≥–∞."""

    prompt = await message.answer(
        f"{question}\n—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (—Ä—É–±–ª–∏) –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
        reply_markup=expenses_amount_keyboard(include_skip=True),
    )
    await _set_prompt(message, state, prompt=prompt)
    await state.set_state(step)


async def _ask_confirm(message: types.Message, state: FSMContext) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –∏—Ç–æ–≥–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏."""

    context = await _get_context(state)
    data = context.get("data", {})
    total = sum(int(data.get(key, 0) or 0) for key in ("e", "f", "g", "h", "i", "j", "k"))
    data["total"] = total
    text = (
        "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"‚Ä¢ —Å—É–¥–Ω–æ: {data.get('ship', '‚Äî')}\n"
        f"‚Ä¢ —Ç—Ä—é–º–æ–≤: {data.get('holds', '‚Äî')}\n"
        f"‚Ä¢ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {data.get('e', 0)}\n"
        f"‚Ä¢ –±—Ä–∏–≥–∞–¥–∏—Ä: {data.get('f', 0)}\n"
        f"‚Ä¢ —Ä–∞–±–æ—á–∏–µ: {data.get('g', 0)}\n"
        f"‚Ä¢ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ: {data.get('h', 0)}\n"
        f"‚Ä¢ –ø–∏—Ç–∞–Ω–∏–µ: {data.get('i', 0)}\n"
        f"‚Ä¢ —Ç–∞–∫—Å–∏: {data.get('j', 0)}\n"
        f"‚Ä¢ –ø—Ä–æ—á–∏–µ: {data.get('k', 0)}\n"
        f"‚Äî –≤—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total}"
    )
    prompt = await message.answer(text, reply_markup=expenses_confirm_keyboard())
    await _set_prompt(message, state, prompt=prompt)
    await state.set_state(ExpensesState.CONFIRM)


async def _handle_menu_button(message: types.Message, state: FSMContext) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—Ö–æ–¥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."""

    if message.text == MENU_BUTTON:
        await _add_user_message(state, message.message_id)
        await _return_to_menu(message, state)
        return True
    return False


@router.message(ExpensesState.INTRO)
async def handle_intro(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Ä–∞–∑–¥–µ–ª–∞."""

    if await _handle_menu_button(message, state):
        return

    if message.text != START_EXPENSES_BUTTON:
        hint = await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üßæ –ù–∞—á–∞—Ç—å –≤–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤¬ª.")
        await _add_bot_message(state, hint.message_id)
        await _add_user_message(state, message.message_id)
        return

    await _add_user_message(state, message.message_id)
    await _cleanup_step(message, state)
    await _ask_ship(message, state)


@router.message(ExpensesState.SHIP)
async def handle_ship(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—É–¥–Ω–∞."""

    if await _handle_menu_button(message, state):
        return

    await _add_user_message(state, message.message_id)
    context = await _get_context(state)
    ships: list[str] = context.get("ships", [])
    text = (message.text or "").strip()
    if not text:
        reply = await message.answer("–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—É–¥–Ω–∞.")
        await _add_bot_message(state, reply.message_id)
        return

    ships_map = {name.casefold(): name for name in ships}
    lookup = ships_map.get(text.casefold())
    if lookup:
        normalized = lookup
    else:
        if not SHIP_PATTERN.fullmatch(text):
            reply = await message.answer(
                "–Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/–¥–µ—Ñ–∏—Å/–ø—Ä–æ–±–µ–ª."
            )
            await _add_bot_message(state, reply.message_id)
            return
        normalized = _normalize_ship_name(text)
        service = _get_service()
        await asyncio.to_thread(service.add_ship, normalized)
        ships.append(normalized)
        context["ships"] = ships

    data = context.setdefault("data", {})
    data["ship"] = normalized
    await _save_context(state, context)
    await _cleanup_step(message, state)
    await _ask_holds(message, state)


@router.message(ExpensesState.HOLDS)
async def handle_holds(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∏—Å–ª–∞ —Ç—Ä—é–º–æ–≤."""

    if await _handle_menu_button(message, state):
        return

    await _add_user_message(state, message.message_id)
    text = (message.text or "").strip()
    if not text.isdigit() or not (1 <= int(text) <= 7):
        reply = await message.answer("–≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7 –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.")
        await _add_bot_message(state, reply.message_id)
        return

    context = await _get_context(state)
    context.setdefault("data", {})["holds"] = int(text)
    await _save_context(state, context)
    await _cleanup_step(message, state)
    await _ask_amount(
        message,
        state,
        step=ExpensesState.DRIVER,
        question="—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è.",
    )


async def _handle_amount(
    message: types.Message,
    state: FSMContext,
    *,
    key: str,
    next_step: ExpensesState,
    question: str,
) -> None:
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–Ω–µ–∂–Ω—ã—Ö —à–∞–≥–æ–≤."""

    if await _handle_menu_button(message, state):
        return

    await _add_user_message(state, message.message_id)
    try:
        amount = parse_amount(message.text or "", skip_token=SKIP_BUTTON)
    except ValueError:
        reply = await message.answer("—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (—Ä—É–±–ª–∏) –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
        await _add_bot_message(state, reply.message_id)
        return

    context = await _get_context(state)
    context.setdefault("data", {})[key] = amount
    await _save_context(state, context)
    await _cleanup_step(message, state)
    await _ask_amount(message, state, step=next_step, question=question)


@router.message(ExpensesState.DRIVER)
async def handle_driver(message: types.Message, state: FSMContext) -> None:
    await _handle_amount(
        message,
        state,
        key="e",
        next_step=ExpensesState.BRIGADIER,
        question="—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è (–±—Ä–∏–≥–∞–¥–∏—Ä).",
    )


@router.message(ExpensesState.BRIGADIER)
async def handle_brigadier(message: types.Message, state: FSMContext) -> None:
    await _handle_amount(
        message,
        state,
        key="f",
        next_step=ExpensesState.WORKERS,
        question="—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã —Ä–∞–±–æ—á–∏—Ö.",
    )


@router.message(ExpensesState.WORKERS)
async def handle_workers(message: types.Message, state: FSMContext) -> None:
    await _handle_amount(
        message,
        state,
        key="g",
        next_step=ExpensesState.AUX,
        question="—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.",
    )


@router.message(ExpensesState.AUX)
async def handle_aux(message: types.Message, state: FSMContext) -> None:
    await _handle_amount(
        message,
        state,
        key="h",
        next_step=ExpensesState.FOOD,
        question="—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ.",
    )


@router.message(ExpensesState.FOOD)
async def handle_food(message: types.Message, state: FSMContext) -> None:
    await _handle_amount(
        message,
        state,
        key="i",
        next_step=ExpensesState.TAXI,
        question="—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Ç–∞–∫—Å–∏.",
    )


@router.message(ExpensesState.TAXI)
async def handle_taxi(message: types.Message, state: FSMContext) -> None:
    await _handle_amount(
        message,
        state,
        key="j",
        next_step=ExpensesState.OTHER,
        question="—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ—á–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.",
    )


@router.message(ExpensesState.OTHER)
async def handle_other(message: types.Message, state: FSMContext) -> None:
    if await _handle_menu_button(message, state):
        return

    await _add_user_message(state, message.message_id)
    try:
        amount = parse_amount(message.text or "", skip_token=SKIP_BUTTON)
    except ValueError:
        reply = await message.answer("—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (—Ä—É–±–ª–∏) –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
        await _add_bot_message(state, reply.message_id)
        return

    context = await _get_context(state)
    context.setdefault("data", {})["k"] = amount
    await _save_context(state, context)
    await _cleanup_step(message, state)
    await _ask_confirm(message, state)


@router.message(ExpensesState.CONFIRM)
async def handle_confirm(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö."""

    if await _handle_menu_button(message, state):
        return

    await _add_user_message(state, message.message_id)
    text = message.text or ""
    if text == EDIT_BUTTON:
        context = await _get_context(state)
        context["data"] = {}
        await _save_context(state, context)
        await _cleanup_step(message, state)
        await _ask_ship(message, state)
        return
    if text != CONFIRM_BUTTON:
        reply = await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        await _add_bot_message(state, reply.message_id)
        return

    await _cleanup_step(message, state)
    await flash_message(message, "üíæ –°–æ—Ö—Ä–∞–Ω—è—é‚Ä¶", ttl=2.0)
    context = await _get_context(state)
    data = context.get("data", {})
    user_id = context.get("user_id")
    row = context.get("row")
    if not isinstance(user_id, int) or not isinstance(row, int):
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–º–µ–Ω–µ.")
        await state.update_data(expenses_ctx=None)
        return

    service = _get_service()
    await asyncio.to_thread(
        service.save_expenses_block,
        user_id,
        row,
        ship=data.get("ship"),
        holds=data.get("holds"),
        e=data.get("e", 0),
        f=data.get("f", 0),
        g=data.get("g", 0),
        h=data.get("h", 0),
        i=data.get("i", 0),
        j=data.get("j", 0),
        k=data.get("k", 0),
    )

    from bot.handlers.shift_menu import mark_mode_done, render_shift_menu

    mark_mode_done(user_id, "expenses")
    done_message = await message.answer(
        "—Ä–∞–∑–¥–µ–ª ¬´—Ä–∞—Å—Ö–æ–¥—ã —Å–º–µ–Ω—ã¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ",
        reply_markup=expenses_remove_keyboard(),
    )
    await state.update_data(expenses_ctx=None)
    await render_shift_menu(
        message,
        user_id,
        row,
        state=state,
        service=service,
        delete_trigger_message=False,
        show_progress=False,
    )
    if done_message:
        try:
            await message.bot.delete_message(message.chat.id, done_message.message_id)
        except TelegramBadRequest:
            pass
        except Exception:  # noqa: BLE001
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤")
