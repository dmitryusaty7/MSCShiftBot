"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –º–µ–Ω—é —Å–º–µ–Ω—ã."""

from __future__ import annotations

import asyncio
import logging

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.handlers.shift_menu import (
    ShiftState,
    render_shift_menu,
    reset_shift_session,
)
from bot.keyboards.dashboard import START_SHIFT_BUTTON, dashboard_keyboard
from bot.utils.flash import flash_message
from features.utils.locks import acquire_user_lock, release_user_lock
from services.sheets import ShiftAlreadyOpenedError, SheetsService, UserProfile

router = Router(name="dashboard")

logger = logging.getLogger(__name__)
_service: SheetsService | None = None


def _get_service() -> SheetsService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç) —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π."""

    global _service
    if _service is None:
        _service = SheetsService()
    return _service


async def _load_profile(service: SheetsService, user_id: int) -> UserProfile | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏."""

    try:
        return await asyncio.to_thread(service.get_user_profile, user_id, required=False)
    except Exception:  # noqa: BLE001
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user_id=%s)", user_id)
        return None


async def show_dashboard(
    message: types.Message,
    *,
    service: SheetsService | None = None,
    state: FSMContext | None = None,
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ —Å–º–µ–Ω–∞–º."""

    sheets = service or _get_service()
    user_id = message.from_user.id
    profile = await _load_profile(sheets, user_id)

    if profile is None:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return

    if state is not None:
        await state.set_state(ShiftState.IDLE)
    reset_shift_session(user_id)

    fio_text = profile.fio.strip() or profile.fio_compact.strip() or str(user_id)
    suffix = "" if fio_text.endswith(".") else "."

    lines = [
        "üóÇ –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å",
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {fio_text}{suffix}",
        "",
        f"–°–º–µ–Ω –∑–∞–∫—Ä—ã—Ç–æ: {profile.closed_shifts}",
        "",
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ¬ª –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –±–æ—Ç–∞.",
    ]

    await message.answer("\n".join(lines), reply_markup=dashboard_keyboard())


@router.message(Command("menu"))
async def handle_menu_command(message: types.Message, state: FSMContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /menu –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏."""

    await show_dashboard(message, state=state)


async def _open_shift(
    message: types.Message,
    state: FSMContext,
    *,
    service: SheetsService,
) -> None:
    """–°–æ–∑–¥–∞—ë—Ç —Ä–∞–±–æ—á—É—é —Å—Ç—Ä–æ–∫—É —Å–º–µ–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å–º–µ–Ω—ã."""

    user_id = message.from_user.id

    await flash_message(message, "–ó–∞–≥—Ä—É–∂–∞—é‚Ä¶", ttl=2.0)

    try:
        locked_today, existing_row = await asyncio.to_thread(
            service.check_today_shift_lock, user_id
        )
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–º–µ–Ω—ã (user_id=%s)", user_id
        )
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–º–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return

    if locked_today:
        await message.answer(
            "–°–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –∑–∞–≤—Ç—Ä–∞."
        )
        return

    lock = await acquire_user_lock(user_id)
    if lock is None:
        await message.answer(
            "–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    row_index = existing_row
    try:
        if row_index is None:
            row_index = await asyncio.to_thread(service.open_shift_for_user, user_id)
    except ShiftAlreadyOpenedError:
        await message.answer(
            "–°–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –∑–∞–≤—Ç—Ä–∞."
        )
        return
    except Exception:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å–º–µ–Ω—ã (user_id=%s)", user_id
        )
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–º–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )
        return
    finally:
        release_user_lock(lock)

    try:
        logger.info(
            "–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é —Å–º–µ–Ω—ã (user_id=%s, row=%s)",
            user_id,
            row_index,
        )
        await render_shift_menu(
            message,
            user_id,
            row_index,
            service=service,
            state=state,
            delete_trigger_message=True,
            show_loading=False,
        )
    except Exception:  # noqa: BLE001
        logger.warning(
            "–°–±–æ–π –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é —Å–º–µ–Ω—ã (user_id=%s, row=%s)",
            user_id,
            row_index,
            exc_info=True,
        )
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."
        )


@router.message(F.text == START_SHIFT_BUTTON)
async def handle_start_shift(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã."""

    service = _get_service()
    await _open_shift(message, state, service=service)
