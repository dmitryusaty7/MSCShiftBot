"""–°—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–∑–¥–µ–ª–∞ ¬´–ú–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª —Å –æ—á–∏—Å—Ç–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ."""

from __future__ import annotations

import asyncio
import datetime as dt
import logging
from pathlib import Path
from typing import Any, Dict, List

from aiogram import F, Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.keyboards.materials import (
    CONFIRM_BUTTON,
    DELETE_LAST_BUTTON,
    EDIT_BUTTON,
    MENU_BUTTON,
    SKIP_BUTTON,
    START_MATERIALS_BUTTON,
    materials_amount_keyboard,
    materials_confirm_keyboard,
    materials_photos_keyboard,
    materials_remove_keyboard,
    materials_start_keyboard,
)
from bot.utils.cleanup import cleanup_screen, remember_message, send_screen_message
from bot.utils.flash import flash_message
from bot.validators.number import parse_amount
from features.utils.messaging import safe_delete
from services.drive import get_drive
from services.drive_yadisk import YaDiskError, YaDiskService
from services.sheets import SheetsService

router = Router(name="materials")

logger = logging.getLogger(__name__)

_service: SheetsService | None = None
_drive: YaDiskService | None = None


class MaterialsState(StatesGroup):
    """–≠—Ç–∞–ø—ã —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–ú–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª."""

    INTRO = State()
    PVD = State()
    PVC = State()
    TAPE = State()
    PHOTOS = State()
    CONFIRM = State()


def _get_service() -> SheetsService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Ç–∞–±–ª–∏—Ü."""

    global _service
    if _service is None:
        _service = SheetsService()
    return _service


def _get_drive() -> YaDiskService:
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É."""

    global _drive
    if _drive is None:
        _drive = get_drive()
    return _drive


def _make_tracker() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —à–∞–≥–∞."""

    return {"prompt_id": None, "user_messages": [], "bot_messages": []}


async def _get_context(state: FSMContext) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –∏–∑ FSM."""

    data = await state.get_data()
    context = data.get("materials_ctx")
    if not isinstance(context, dict):
        context = {}
    tracker = context.get("tracker")
    if not isinstance(tracker, dict):
        tracker = _make_tracker()
    else:
        tracker.setdefault("prompt_id", None)
        tracker.setdefault("user_messages", [])
        tracker.setdefault("bot_messages", [])
    context["tracker"] = tracker
    return context


async def _save_context(state: FSMContext, context: Dict[str, Any]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –≤ FSM."""

    await state.update_data(materials_ctx=context)


async def _set_prompt(
    message: types.Message,
    state: FSMContext,
    *,
    prompt: types.Message,
) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ."""

    context = await _get_context(state)
    tracker = _make_tracker()
    tracker["prompt_id"] = prompt.message_id
    context["tracker"] = tracker
    await _save_context(state, context)
    remember_message(message.chat.id, prompt.message_id)


async def _add_user_message(state: FSMContext, message_id: int, chat_id: int) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å –æ—á–∏—Å—Ç–∫–∏."""

    context = await _get_context(state)
    tracker = context.get("tracker", _make_tracker())
    tracker.setdefault("user_messages", []).append(message_id)
    context["tracker"] = tracker
    await _save_context(state, context)
    remember_message(chat_id, message_id)


async def _add_bot_message(state: FSMContext, message_id: int, chat_id: int) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è."""

    context = await _get_context(state)
    tracker = context.get("tracker", _make_tracker())
    tracker.setdefault("bot_messages", []).append(message_id)
    context["tracker"] = tracker
    await _save_context(state, context)
    remember_message(chat_id, message_id)


async def _delete_messages(bot: types.Bot, chat_id: int, message_ids: List[int]) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç –Ω–∞–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π."""

    for message_id in message_ids:
        if not message_id:
            continue
        try:
            await bot.delete_message(chat_id, message_id)
        except TelegramBadRequest:
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ %s —É–∂–µ —É–¥–∞–ª–µ–Ω–æ", message_id)
        except Exception:  # noqa: BLE001
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ %s", message_id)


async def _cleanup_step(message: types.Message, state: FSMContext) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç—Ä–µ–∫–µ—Ä."""

    context = await _get_context(state)
    tracker = context.get("tracker", _make_tracker())
    chat_id = message.chat.id
    bot = message.bot
    prompt_id = tracker.get("prompt_id")
    bot_messages = tracker.get("bot_messages", [])
    user_messages = tracker.get("user_messages", [])
    ids: List[int] = []
    if prompt_id:
        ids.append(prompt_id)
    ids.extend(bot_messages)
    await _delete_messages(bot, chat_id, ids)
    await _delete_messages(bot, chat_id, user_messages)
    context["tracker"] = _make_tracker()
    await _save_context(state, context)


def _format_day_title(day: dt.date) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ø–æ –¥–∞—Ç–µ —Å–º–µ–Ω—ã."""

    return day.strftime("%Y-%m-%d")


def _format_time_label(moment: dt.datetime) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""

    return moment.astimezone().strftime("%H%M%S")


def _normalize_extension(suffix: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .jpg/.png –∏ —Ç.–ø."""

    clean = suffix.lower().strip()
    return clean if clean else ".jpg"


def _guess_mime_type(ext: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç MIME-—Ç–∏–ø –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–æ—Ç–æ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é."""

    mapping = {".jpg": "image/jpeg", ".jpeg": "image/jpeg", ".png": "image/png"}
    return mapping.get(ext, "application/octet-stream")


def _ensure_bytes(downloaded: Any) -> bytes:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∫ ``bytes``."""

    try:
        if hasattr(downloaded, "read"):
            return downloaded.read()
        return downloaded
    finally:
        closer = getattr(downloaded, "close", None)
        if callable(closer):
            try:
                closer()
            except Exception:  # noqa: BLE001
                logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç", exc_info=True)


async def _return_to_menu(message: types.Message, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Å–º–µ–Ω—ã –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."""

    context = await _get_context(state)
    user_id = context.get("user_id")
    row = context.get("row")
    await _cleanup_step(message, state)
    await cleanup_screen(message.bot, message.chat.id, keep_start=False)
    await state.update_data(materials_ctx=None)
    if not isinstance(user_id, int) or not isinstance(row, int):
        return
    from bot.handlers.shift_menu import render_shift_menu

    await render_shift_menu(
        message,
        user_id,
        row,
        state=state,
        service=_get_service(),
        delete_trigger_message=False,
        show_progress=False,
    )


async def start_materials(
    message: types.Message,
    state: FSMContext,
    *,
    user_id: int | None = None,
) -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ú–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª –∏–∑ –º–µ–Ω—é —Å–º–µ–Ω—ã."""

    await safe_delete(message)
    await cleanup_screen(message.bot, message.chat.id, keep_start=True)

    actual_user_id = user_id or (message.from_user.id if message.from_user else None)
    if actual_user_id is None:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        await state.update_data(materials_ctx=None)
        return

    service = _get_service()
    row = await asyncio.to_thread(service.get_shift_row_index_for_user, actual_user_id)
    if row is None:
        row = await asyncio.to_thread(service.open_shift_for_user, actual_user_id)

    today = dt.datetime.now().astimezone().date()
    day_title = _format_day_title(today)

    try:
        drive = _get_drive()
        await asyncio.to_thread(drive.get_or_create_daily_folder, day_title)
    except (YaDiskError, RuntimeError, ValueError) as exc:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞–ø–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: %s", exc)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.update_data(materials_ctx=None)
        return

    intro_lines = [
        "üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö",
        "",
        "–ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Ö–æ–¥ –ø–ª—ë–Ω–∫–∏ –ü–í–î, —Ç—Ä—É–±–æ–∫ –ü–í–• –∏ –∫–ª–µ–π–∫–æ–π –ª–µ–Ω—Ç—ã –ø–æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ.",
        "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–æ–≤ –∏–ª–∏ –∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.",
    ]
    prompt = await send_screen_message(
        message,
        "\n".join(intro_lines),
        reply_markup=materials_start_keyboard(),
    )

    context = {
        "user_id": actual_user_id,
        "row": row,
        "day_title": day_title,
        "data": {},
        "photos": [],
        "tracker": {"prompt_id": prompt.message_id, "user_messages": [], "bot_messages": []},
    }
    await _save_context(state, context)
    await state.set_state(MaterialsState.INTRO)


async def _ask_pvd(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥ —Ä—É–ª–æ–Ω–æ–≤ –ü–í–î."""

    prompt = await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ä—É–ª–æ–Ω–æ–≤ –ü–í–î (–≤ –º–µ—Ç—Ä–∞—Ö).",
        reply_markup=materials_amount_keyboard(include_skip=True),
    )
    await _set_prompt(message, state, prompt=prompt)
    await state.set_state(MaterialsState.PVD)


async def _ask_pvc(message: types.Message, state: FSMContext) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É —Ç—Ä—É–±–æ–∫ –ü–í–•."""

    prompt = await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ç—Ä—É–±–æ–∫ –ü–í–• (–≤ —à—Ç—É–∫–∞—Ö).",
        reply_markup=materials_amount_keyboard(include_skip=True),
    )
    await _set_prompt(message, state, prompt=prompt)
    await state.set_state(MaterialsState.PVC)


async def _ask_tape(message: types.Message, state: FSMContext) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É —Ä–∞—Å—Ö–æ–¥–∞ –∫–ª–µ–π–∫–æ–π –ª–µ–Ω—Ç—ã."""

    prompt = await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –∫–ª–µ–π–∫–æ–π –ª–µ–Ω—Ç—ã (–≤ —à—Ç—É–∫–∞—Ö).",
        reply_markup=materials_amount_keyboard(include_skip=True),
    )
    await _set_prompt(message, state, prompt=prompt)
    await state.set_state(MaterialsState.TAPE)


async def _ask_photos(message: types.Message, state: FSMContext) -> None:
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∫—Ä–µ–ø–ª–µ–Ω–∏—è."""

    prompt = await message.answer(
        "üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫—Ä–µ–ø–ª–µ–Ω–∏—è. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –ø–æ–¥—Ä—è–¥.\n"
        "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.",
        reply_markup=materials_photos_keyboard(),
    )
    await _set_prompt(message, state, prompt=prompt)
    await state.set_state(MaterialsState.PHOTOS)


async def _ask_confirm(message: types.Message, state: FSMContext) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö."""

    context = await _get_context(state)
    data = context.get("data", {})
    photos: list[dict[str, Any]] = context.get("photos", [])
    text = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"‚Ä¢ –ü–í–î (–º): {data.get('pvd', 0)}\n"
        f"‚Ä¢ –ü–í–• (—à—Ç): {data.get('pvc', 0)}\n"
        f"‚Ä¢ –õ–µ–Ω—Ç–∞ (—à—Ç): {data.get('tape', 0)}\n"
        f"‚Ä¢ –§–æ—Ç–æ: {len(photos)} —à—Ç"
    )
    prompt = await message.answer(text, reply_markup=materials_confirm_keyboard())
    await _set_prompt(message, state, prompt=prompt)
    await state.set_state(MaterialsState.CONFIRM)


async def _handle_menu_button(message: types.Message, state: FSMContext) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é —Å–º–µ–Ω—ã."""

    if message.text == MENU_BUTTON:
        await _add_user_message(state, message.message_id, message.chat.id)
        await _return_to_menu(message, state)
        return True
    return False


@router.message(MaterialsState.INTRO)
async def handle_intro(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª–∞."""

    if await _handle_menu_button(message, state):
        return

    if message.text != START_MATERIALS_BUTTON:
        reply = await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì¶ –ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤¬ª.")
        await _add_user_message(state, message.message_id, message.chat.id)
        await _add_bot_message(state, reply.message_id, message.chat.id)
        return

    await _add_user_message(state, message.message_id, message.chat.id)
    await _cleanup_step(message, state)
    await _ask_pvd(message, state)


@router.message(MaterialsState.PVD)
async def handle_pvd(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥ –ü–í–î."""

    if await _handle_menu_button(message, state):
        return

    await _add_user_message(state, message.message_id, message.chat.id)
    try:
        amount = parse_amount(message.text or "", skip_token=SKIP_BUTTON)
    except ValueError as exc:
        reply = await message.answer(str(exc))
        await _add_bot_message(state, reply.message_id, message.chat.id)
        return

    context = await _get_context(state)
    context.setdefault("data", {})["pvd"] = amount
    await _save_context(state, context)
    await _cleanup_step(message, state)
    await _ask_pvc(message, state)


@router.message(MaterialsState.PVC)
async def handle_pvc(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥ —Ç—Ä—É–±–æ–∫ –ü–í–•."""

    if await _handle_menu_button(message, state):
        return

    await _add_user_message(state, message.message_id, message.chat.id)
    try:
        amount = parse_amount(message.text or "", skip_token=SKIP_BUTTON)
    except ValueError as exc:
        reply = await message.answer(str(exc))
        await _add_bot_message(state, reply.message_id, message.chat.id)
        return

    context = await _get_context(state)
    context.setdefault("data", {})["pvc"] = amount
    await _save_context(state, context)
    await _cleanup_step(message, state)
    await _ask_tape(message, state)


@router.message(MaterialsState.TAPE)
async def handle_tape(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥ –∫–ª–µ–π–∫–æ–π –ª–µ–Ω—Ç—ã."""

    if await _handle_menu_button(message, state):
        return

    await _add_user_message(state, message.message_id, message.chat.id)
    try:
        amount = parse_amount(message.text or "", skip_token=SKIP_BUTTON)
    except ValueError as exc:
        reply = await message.answer(str(exc))
        await _add_bot_message(state, reply.message_id, message.chat.id)
        return

    context = await _get_context(state)
    context.setdefault("data", {})["tape"] = amount
    await _save_context(state, context)
    await _cleanup_step(message, state)
    await _ask_photos(message, state)


@router.message(MaterialsState.PHOTOS, F.photo)
async def handle_photo(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –∫ —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""

    await _add_user_message(state, message.message_id, message.chat.id)
    context = await _get_context(state)
    photos: list[dict[str, Any]] = context.setdefault("photos", [])
    file_id = message.photo[-1].file_id
    time_label = _format_time_label(message.date or dt.datetime.now())
    photos.append({"file_id": file_id, "time_label": time_label})
    await _save_context(state, context)

    reply = await message.answer(
        f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ: {len(photos)}. –ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å."
    )
    await _add_bot_message(state, reply.message_id, message.chat.id)


@router.message(MaterialsState.PHOTOS, F.text == DELETE_LAST_BUTTON)
async def handle_delete_last(message: types.Message, state: FSMContext) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ."""

    await _add_user_message(state, message.message_id, message.chat.id)
    context = await _get_context(state)
    photos: list[dict[str, Any]] = context.setdefault("photos", [])
    if photos:
        photos.pop()
        reply = await message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å: {len(photos)}.")
    else:
        reply = await message.answer("–°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –ø—É—Å—Ç ‚Äî –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.")
    await _add_bot_message(state, reply.message_id, message.chat.id)
    await _save_context(state, context)


@router.message(MaterialsState.PHOTOS)
async def handle_photos_controls(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç."""

    if await _handle_menu_button(message, state):
        return

    await _add_user_message(state, message.message_id, message.chat.id)
    text = (message.text or "").strip()
    if text != CONFIRM_BUTTON:
        reply = await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        await _add_bot_message(state, reply.message_id, message.chat.id)
        return

    context = await _get_context(state)
    photos: list[dict[str, Any]] = context.get("photos", [])
    if not photos:
        reply = await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.")
        await _add_bot_message(state, reply.message_id, message.chat.id)
        return

    await _cleanup_step(message, state)
    await _ask_confirm(message, state)


async def _save_materials(context: Dict[str, Any], message: types.Message) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–ø–∫—É."""

    user_id = context.get("user_id")
    row = context.get("row")
    day_title = context.get("day_title")
    photos: list[dict[str, Any]] = context.get("photos", [])
    data = context.get("data", {})

    if not isinstance(user_id, int) or not isinstance(row, int):
        raise RuntimeError("–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–º–µ–Ω—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")

    drive = _get_drive()
    service = _get_service()

    saved_names: list[str] = []
    for index, entry in enumerate(photos, start=1):
        file_id = entry["file_id"]
        time_label = entry.get("time_label") or _format_time_label(dt.datetime.now())

        telegram_file = await message.bot.get_file(file_id)
        downloaded = await message.bot.download_file(telegram_file.file_path)
        content = _ensure_bytes(downloaded)

        ext = _normalize_extension(Path(telegram_file.file_path or "").suffix)
        mime = _guess_mime_type(ext)

        ordinal = index
        while True:
            candidate = f"{time_label}_{user_id}_{ordinal:02d}{ext}"
            try:
                await asyncio.to_thread(
                    drive.save_photo,
                    content,
                    candidate,
                    day_title,
                    content_type=mime,
                )
            except YaDiskError as exc:
                if exc.status == 409:
                    ordinal += 1
                    continue
                raise
            saved_names.append(candidate)
            break

    if not saved_names:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")

    public_url = await asyncio.to_thread(drive.folder_public_link, day_title)
    if not public_url:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–ø–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")

    await asyncio.to_thread(
        service.save_materials_block,
        row,
        pvd_m=data.get("pvd", 0),
        pvc_pcs=data.get("pvc", 0),
        tape_pcs=data.get("tape", 0),
        folder_link=public_url,
    )

    logger.info(
        "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: user_id=%s, row=%s, —Ñ–∞–π–ª–æ–≤=%s", user_id, row, len(saved_names)
    )
    return public_url


@router.message(MaterialsState.CONFIRM)
async def handle_confirm(message: types.Message, state: FSMContext) -> None:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é."""

    if await _handle_menu_button(message, state):
        return

    await _add_user_message(state, message.message_id, message.chat.id)
    text = (message.text or "").strip()
    if text == EDIT_BUTTON:
        context = await _get_context(state)
        context["tracker"] = _make_tracker()
        await _save_context(state, context)
        await _cleanup_step(message, state)
        await _ask_pvd(message, state)
        return
    if text != CONFIRM_BUTTON:
        reply = await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        await _add_bot_message(state, reply.message_id, message.chat.id)
        return

    await _cleanup_step(message, state)
    await flash_message(message, "üíæ –°–æ—Ö—Ä–∞–Ω—è—é‚Ä¶", ttl=2.0)

    context = await _get_context(state)
    try:
        await _save_materials(context, message)
    except YaDiskError as exc:  # pragma: no cover - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        logger.exception("–û—à–∏–±–∫–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: %s", exc)
        if exc.status in {401, 403}:
            reply = await message.answer(
                "–¢–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ—Ç –ø—Ä–∞–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
            )
        else:
            reply = await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        await _add_bot_message(state, reply.message_id, message.chat.id)
        return
    except Exception as exc:  # pragma: no cover - –∑–∞—â–∏—Ç–Ω—ã–π –∫–æ–¥
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã: %s", exc)
        reply = await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await _add_bot_message(state, reply.message_id, message.chat.id)
        return

    from bot.handlers.shift_menu import mark_mode_done, render_shift_menu

    user_id = context.get("user_id")
    row = context.get("row")
    if not isinstance(user_id, int) or not isinstance(row, int):
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å–º–µ–Ω—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é.")
        await state.update_data(materials_ctx=None)
        return

    mark_mode_done(user_id, "materials")

    await cleanup_screen(message.bot, message.chat.id, keep_start=False)

    done_message = await message.answer(
        "–†–∞–∑–¥–µ–ª ¬´–º–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ",
        reply_markup=materials_remove_keyboard(),
    )

    await state.update_data(materials_ctx=None)
    await state.set_state(None)

    await render_shift_menu(
        message,
        user_id,
        row,
        state=state,
        service=_get_service(),
        delete_trigger_message=False,
        show_progress=False,
        use_screen_message=True,
    )

    if done_message:
        try:
            await message.bot.delete_message(message.chat.id, done_message.message_id)
        except TelegramBadRequest:
            pass
        except Exception:  # noqa: BLE001
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
