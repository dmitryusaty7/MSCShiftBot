"""Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ ¬´–ë—Ä–∏–≥–∞–¥–∞¬ª.

–ú–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –∏–Ω—Ç—Ä–æ, —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è –∏
—à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö. –ö–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –Ω–æ –∏
–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
–º–æ–≥–ª–∏ –Ω–∞–¥—ë–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ –§–ò–û.
"""

from __future__ import annotations

from typing import Dict, Iterable, Sequence, Tuple

from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from bot.services import CrewWorker

__all__ = [
    "START_BUTTON",
    "MENU_BUTTON",
    "BACK_BUTTON",
    "NEXT_BUTTON",
    "ADD_DRIVER_BUTTON",
    "CLEAR_WORKERS_BUTTON",
    "CONFIRM_BUTTON",
    "make_intro_kb",
    "make_driver_kb",
    "make_workers_kb",
]


START_BUTTON = "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ"
MENU_BUTTON = "üè† –≤ –º–µ–Ω—é —Å–º–µ–Ω—ã"
BACK_BUTTON = "‚¨Ö –Ω–∞–∑–∞–¥"
NEXT_BUTTON = "‚û° –¥–∞–ª–µ–µ"
ADD_DRIVER_BUTTON = "‚ûï –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è"
CLEAR_WORKERS_BUTTON = "üßπ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"
CONFIRM_BUTTON = "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"


def _builder_with_resize() -> ReplyKeyboardBuilder:
    builder = ReplyKeyboardBuilder()
    builder.adjust(1)
    return builder


def make_intro_kb() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Ä–µ–∂–∏–º–∞ ¬´–ë—Ä–∏–≥–∞–¥–∞¬ª."""

    builder = _builder_with_resize()
    builder.row(KeyboardButton(text=START_BUTTON))
    builder.row(KeyboardButton(text=MENU_BUTTON))
    return builder.as_markup(resize_keyboard=True)


def make_driver_kb(
    drivers: Sequence[CrewWorker],
    driver_id: int | None,
) -> Tuple[ReplyKeyboardMarkup, Dict[str, int]]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ id."""

    builder = _builder_with_resize()
    mapping: Dict[str, int] = {}

    for worker in drivers:
        prefix = "‚úî" if worker.worker_id == driver_id else "üë§"
        text = f"{prefix} {worker.name}"
        builder.row(KeyboardButton(text=text))
        mapping[text] = worker.worker_id

    builder.row(KeyboardButton(text=ADD_DRIVER_BUTTON))

    navigation: list[KeyboardButton] = [
        KeyboardButton(text=BACK_BUTTON),
        KeyboardButton(text=MENU_BUTTON),
    ]
    if driver_id is not None:
        navigation.append(KeyboardButton(text=NEXT_BUTTON))
    builder.row(*navigation)

    return builder.as_markup(resize_keyboard=True), mapping


def make_workers_kb(
    workers: Sequence[CrewWorker],
    selected_ids: Iterable[int],
) -> Tuple[ReplyKeyboardMarkup, Dict[str, int]]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –∏ –∫–∞—Ä—Ç—É —Ç–µ–∫—Å—Ç–æ–≤."""

    selected_set = set(selected_ids)
    builder = ReplyKeyboardBuilder()
    mapping: Dict[str, int] = {}

    row: list[KeyboardButton] = []
    for worker in workers:
        prefix = "‚úî" if worker.worker_id in selected_set else "üë∑"
        text = f"{prefix} {worker.name}"
        row.append(KeyboardButton(text=text))
        mapping[text] = worker.worker_id
        if len(row) == 2:
            builder.row(*row)
            row = []

    if row:
        builder.row(*row)

    builder.row(KeyboardButton(text=CLEAR_WORKERS_BUTTON))

    navigation: list[KeyboardButton] = [
        KeyboardButton(text=BACK_BUTTON),
        KeyboardButton(text=MENU_BUTTON),
    ]
    if selected_set:
        navigation.append(KeyboardButton(text=CONFIRM_BUTTON))
    builder.row(*navigation)

    return builder.as_markup(resize_keyboard=True), mapping
