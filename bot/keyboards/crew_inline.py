"""Inline-—Å–≤–æ–¥–∫–∞ —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–ë—Ä–∏–≥–∞–¥–∞¬ª."""

from __future__ import annotations

from typing import Sequence

from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.services import CrewWorker

__all__ = [
    "WORKER_TOGGLE_PREFIX",
    "WORKERS_CONFIRM_CALLBACK",
    "make_workers_inline_summary",
]

WORKER_TOGGLE_PREFIX = "crew:wrk:toggle:"
WORKERS_CONFIRM_CALLBACK = "crew:wrk:confirm"


def make_workers_inline_summary(
    driver: CrewWorker | None,
    selected: Sequence[CrewWorker],
) -> tuple[str, InlineKeyboardMarkup | None]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–≤–æ–¥–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö."""

    driver_name = driver.name if driver else "‚Äî"
    lines: list[str] = [
        "üë• –°–æ—Å—Ç–∞–≤ –±—Ä–∏–≥–∞–¥—ã ‚Äî —Å–≤–æ–¥–∫–∞",
        f"–≤–æ–¥–∏—Ç–µ–ª—å: {driver_name}",
        "",
        "–≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ:",
    ]

    if selected:
        lines.extend(f"‚Ä¢ {worker.name}" for worker in selected)
        lines.extend(["", "‚úñÔ∏è ‚Äî —É–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—á–µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞"])
    else:
        lines.append("—Ä–∞–±–æ—á–∏–µ –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
        return "\n".join(lines), None

    builder = InlineKeyboardBuilder()
    for worker in selected:
        builder.button(
            text=f"‚úñ {worker.name}",
            callback_data=f"{WORKER_TOGGLE_PREFIX}{worker.worker_id}",
        )
    builder.adjust(2)

    return "\n".join(lines), builder.as_markup()
